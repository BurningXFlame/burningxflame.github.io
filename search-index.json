[{"content":"\rMeshless - High-Performance Sidecarless Service Mesh Speed up your cloud with the most performant service mesh.\n99% less resource consumption than sidecar pattern of service mesh.\nCompletely eliminate the network latency caused by sidecar pattern of service mesh.\nEven eliminate the network latency of direct communication.\nReal-time optimal routing.\nProblems of Sidecar Pattern of Service Mesh High Resource Consumption A single sidecar may not use a lot of resources, but the total resource usage of all sidecars is huge.\nFor example, even if you can reduce the memory usage of a sidecar to 50MB, the total memory usage of all sidecars on a node of 100 pods is 5GB.\nSignificant Increase in Network Latency In the case of Service Mesh with Sidecar, all packets from or to the application must go through the sidecar, resulting in each inbound or outbound packet traversing the TCP/IP stack of pod for extra multiple times, resulting in significant increases in network latency ↗ .\nNumber of Times of Traversing TCP/IP Stack of Pod:\nCase Direct Service Mesh with Sidecar Pod-to-Pod on the Same Node 2 6 (+200% of Direct) Pod-to-Pod Cross-Node 2 6 (+200% of Direct) \u0026ldquo;Direct\u0026rdquo; means \u0026ldquo;without Service Mesh\u0026rdquo;.\nMeshless Solves Problems of Sidecar Pattern of Service Mesh 99% Less Resource Consumption than Sidecar Pattern of Service Mesh One Agent per Node\nInstead of\nOne Sidecar per Pod\nFor example, on a node of 100 pods, this reduces the number of Sidecar/Agent from 100 to 1.\nCompletely Eliminate the Network Latency Caused by Sidecar Pattern of Service Mesh, Even Eliminate the Network Latency of Direct Communication UDS(Unix Domain Socket)\nInstead of\nTCP/IP Stack\nNumber of Times of Traversing TCP/IP Stack of Pod:\nCase Direct Service Mesh with Sidecar Meshless Pod-to-Pod on the Same Node 2 6 (+200% of Direct) 0 (-100% of Direct) Pod-to-Pod Cross-Node 2 6 (+200% of Direct) 2 (Same as Direct) Meshless wins in both cases, completely eliminating the network latency caused by the Sidecar Pattern of Service Mesh.\nBesides, in the case of Pod-to-Pod on the Same Node, Meshless even eliminates the network latency of direct communication.\nReal-Time Optimal Routing When routing to a destination service, Meshless connects in parallel to all instances of that service, instantly uses the 1st (i.e. the fastest) successful connection, and aborts others.\n","date":"2024-08-02","id":0,"permalink":"/meshless/doc/intro/","summary":"\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/meshless/doc/img/meshless_hu6816978689216709935.webp\"\r\n  width=\"1400\"\r\n  height=\"1050\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\" \"id=\"h-rh-i-0\"\r\n/\u003e\u003c/p\u003e\n\u003ch1 id=\"meshless---high-performance-sidecarless-service-mesh\"\u003eMeshless - High-Performance Sidecarless Service Mesh\u003c/h1\u003e\n\u003cp\u003eSpeed up your cloud with the most performant service mesh.\u003cbr\u003e\n99% less resource consumption than sidecar pattern of service mesh.\u003cbr\u003e\nCompletely eliminate the network latency caused by sidecar pattern of service mesh.\u003cbr\u003e\nEven eliminate the network latency of direct communication.\u003cbr\u003e\nReal-time optimal routing.\u003c/p\u003e","tags":[],"title":"Intro"},{"content":"\rXTS - Secure and Adaptive Cross-Region Transmission for Cloud XTS is a Cloud-Native Cross-Region Transmission Service which\nimproves the security of Cross-Region Transmission,\nand provides Adaptive and Fair Hierarchical Transmission Control.\nCross-Region Transmission Common use cases of cross-region transmission are\ncross-region replication for disaster recovery of DB, MQ, Object Storage, etc cross-region transmission between instances of active-active or multi-active services cross-region communication between services XTS Improves the Security of Cross-Region Transmission Security Risks of Cross-Region Transmission Usually you have to expose a public IP-port to public networks for each Stateless Service (or each Pod of a StatefulSet) which needs cross-region transmission, in order for a Service (or Pod) to be located and connected across region.\nIf there\u0026rsquo;re, say, thousands of such Services (or Pods), you have to expose thousands of public IP-ports to public networks, which means there are thousands of points of attack.\nSecure Cross-Region Transmission XTS improves the security of cross-region transmission in several ways.\nXTS establishes secure tunnels between regions, and enables cross-region transmission without exposing public IP-ports for your services which need cross-region transmission. XTS minimizes attack surface. Only one public IP-port, i.e. the public IP-port of XTS, of each region is exposed to public networks. XTS protects your services from being exposed to public networks. Your services can only be accessed from within your regions. XTS rejects connections from public networks, except connections from XTS of another region of yours. XTS has builtin abilities to defend against DDoS attacks, to defend against slow attacks, to close idle connections, etc. Adaptive and Fair Hierarchical Transmission Control See ATC for details.\nEffortlessly Scale With Your Business XTS effortlessly scales as your business grows. XTS is Truly Distributed, Load Balanced and Horizontally Scalable. This architecture provides the best scalability and reliability. In theory, there’s no scalability cap, i.e. you can achieve unlimited throughput by specifying an unlimited number of replicas.\nReliability Zero downtime during scaling out/in. Zero downtime during upgrade. All established connections remain intact on config changes. Zero downtime on temporary errors. Auto-recover on temporary errors. Zero downtime on process crash. Auto-recover on process crash. Easy to Use The experience of accessing services in other regions is like accessing services in the same region.\n","date":"2024-05-29","id":1,"permalink":"/xts/doc/intro/","summary":"\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/xts/doc/img/xts_hu14122487979840384869.webp\"\r\n  width=\"1400\"\r\n  height=\"1050\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\" \"id=\"h-rh-i-0\"\r\n/\u003e\u003c/p\u003e\n\u003ch1 id=\"xts---secure-and-adaptive-cross-region-transmission-for-cloud\"\u003eXTS - Secure and Adaptive Cross-Region Transmission for Cloud\u003c/h1\u003e\n\u003cp\u003eXTS is a Cloud-Native Cross-Region Transmission Service which\u003cbr\u003e\nimproves the security of Cross-Region Transmission,\u003cbr\u003e\nand provides Adaptive and Fair Hierarchical Transmission Control.\u003c/p\u003e","tags":[],"title":"Intro"},{"content":"GX - Go eXtended libraries GX is Go eXtended libraries to improve productivity, performance, reliability and security of your products at ease.\nBackward compatibility guaranteed.\nDesigned and developed with usability, performance, reliability and security in mind at the very beginning.\nFeatures Generic Data Structures Auto-scalable Ring Buffer, Double Ended Queue Queue Stack Heap Set Sorted Slice Generic Iterator with Lazy Evaluation From other types to Iterators Iterator Transformations Pipelines of Iterators Drain Iterators From Iterators to other types ID NanoID UUID Logging Logging Facade Light Logger Concurrent Buffer Writer Auto-Flusher Log Rotator Extension Net Connection Pool SOCKS5 Fake Conn BiCopy Idle Timeout Reliable Typical Use Case Process-Level Guardian Goroutine-Level Guardian Auto-Reload on Config Changes Backoff Readiness Timeout Decorator Runtime Goroutine ID Goroutine Local Storage G2G Secure Secure TCP Server Secure HTTP Server Stream Processing Basic Types Basic Processors Count Window Processors Time Window Processors Composite Processors Composite Sources Composite Sinks Sync Semaphore Keyed-Semaphores Generic Concurrency-Safe Map Generic Concurrency-Safe Set Unix Domain Socket UDS Server HTTP Server over UDS HTTP Client over UDS Meshless Client Meshless HTTP Client ","date":"2024-05-06","id":2,"permalink":"/gx/doc/intro/","summary":"\u003ch1 id=\"gx---go-extended-libraries\"\u003eGX - Go eXtended libraries\u003c/h1\u003e\n\u003cp\u003eGX is Go eXtended libraries to improve productivity, performance, reliability and security of your products at ease.\u003c/p\u003e","tags":[],"title":"Intro"},{"content":"\rDCS - Horizontally Scalable Cron for Cloud DCS is a Cloud-Native Job Scheduling System that effortlessly scales with your business.\nFeatures Cron Job Periodic Job HTTP Callback HTTP Callback with Header and/or Body TCP Callback HTTP over UDS Callback HTTP over UDS Callback with Header and/or Body UDS Callback Time Zone Time Zone Change Job History Limit Schedule Times Callback with Retry Callback with Timeout To learn more, view the Complete List of All Features .\nEffortlessly Scale With Your Business DCS effortlessly scales as your business grows. DCS is Truly Distributed, Load Balanced and Horizontally Scalable. This architecture provides the best scalability and reliability. In theory, there’s no scalability cap, i.e. you can achieve unlimited throughput by specifying an unlimited number of replicas.\nReliability Zero downtime during scaling out/in. Zero downtime during upgrade. Zero downtime on time zone changes. Time zone changes are automatically detected and applied at runtime with zero downtime. Zero downtime on temporary errors. Auto-recover on temporary errors. Zero downtime on process crash. Auto-recover on process crash. ","date":"2024-05-06","id":3,"permalink":"/dcs/doc/intro/","summary":"\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/dcs/doc/img/dcs_hu6671644029628747768.webp\"\r\n  width=\"1400\"\r\n  height=\"1050\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\" \"id=\"h-rh-i-0\"\r\n/\u003e\u003c/p\u003e\n\u003ch1 id=\"dcs---horizontally-scalable-cron-for-cloud\"\u003eDCS - Horizontally Scalable Cron for Cloud\u003c/h1\u003e\n\u003cp\u003eDCS is a Cloud-Native Job Scheduling System that effortlessly scales with your business.\u003c/p\u003e","tags":[],"title":"Intro"},{"content":"Meshlet A meshlet is a logical entity, which can be a client that uses services provided by other meshlets, or a server that provides services for other meshlets to use, or both.\nDefine a Meshlet Define a Meshlet via CR:\napiVersion: ext.burningxflame.github.com/v1 kind: Meshlet metadata: namespace: \u0026lt;ns\u0026gt; name: \u0026lt;name\u0026gt; spec: # As a client using services provided by other meshlets. # Declare the services this meshlet uses. # Used for access control. # Optional. client: - namespace: \u0026lt;ns\u0026gt; meshlet: \u0026lt;meshlet-name\u0026gt; service: \u0026lt;service-name\u0026gt; # As a server providing services for other meshlets to use. # Optional. server: # Declare the label selector used to identify Pods that provide the following services. selector: \u0026lt;key\u0026gt;: \u0026lt;value\u0026gt; # Declare the services this meshlet provides. services: - name: \u0026lt;service-name\u0026gt; # Max number of concurrent connections for this service per pod. # Optional. Default to no limit. maxConn: ... # If no data is sent from a connection in the specified duration, close the connection. # Optional. Default to no timeout. idleTimeout: 1m # Canary deployment strategy. # Declare weight of each version. # Optional. canary: - version: v1 weight: 99 - version: v2 weight: 1\rThe format of idleTimeout is defined by Go time.ParseDuration ↗ .\nAttach Meshlet Label to Workload Definition Workload means Deployment, StatefulSet, DaemonSet.\napiVersion: apps/v1 kind: Deployment metadata: ... spec: template: metadata: labels: # Meshlet Label. # Declare which Meshlet the Pods of this workload belong to. meshless/meshlet: \u0026lt;meshlet-name\u0026gt; # Version of this workload. Used in canary deployment strategy. # Optional. version: v1 spec: containers: ...\rCanary Deployment Strategy Canary deployment strategy is used for safely rolling out a new version of a service, by first testing it using a small percentage of traffic, gradually directing more traffic to the new version, and finally directing all traffic to the new version.\nYou may declare the canary deployment strategy of your meshlet when defining a meshlet and attaching Meshlet label to workload definition .\nAs Server A meshlet can be a server that provides services for other meshlets to use.\nYou declare the services your meshlet provides when defining a meshlet .\nFor each service your declare, please listen at the UDS address /meshlet/server/\u0026lt;service-name\u0026gt; in you Pods. The directory /meshlet/server is automatically generated by Meshless. \u0026lt;service-name\u0026gt; is the name of your service.\nAccording to Linux manual, connecting to an UDS address requires write permission on that UDS file. Please set UDS file permission if necessary, so that Meshless Node Agent can connect to your service. Meshless Node Agent runs as UID 1000 and GID 1000.\nLooking for SDK? Try Server-Side SDK .\nAs Client A meshlet can be a client that uses services provided by other meshlets.\nYou declare the services your meshlet uses when defining a meshlet .\nTo access a service,\nConnect to Meshless Node Agent by connecting to the UDS address /meshlet/client/meshless in your Pods. The directory /meshlet/client is automatically generated by Meshless.\nHandshake with Meshless Node Agent. Client Handshake Protocol .\nMeshless Node Agent will establish a secure tunnel between your meshlet and the destination service, as if your meshlet is directly connected to the destination service.\nProceed to communication with the destination service.\nLooking for SDK? Try Client-Side SDK .\nClient Handshake Protocol Request Client sends a request which is a stream of bytes as defined below.\nSize in Bytes Meaning 1 Protocol Version: 1 1 Size of Destination Service ID up to 255 Destination Service ID Service ID Service ID is like FQDN. Its format is \u0026lt;service-name\u0026gt;.\u0026lt;meshlet-name\u0026gt;.\u0026lt;ns\u0026gt;.\nReply Meshless Node Agent validates the request, and establishes a secure tunnel between your meshlet and the destination service, and sends a reply which is a stream of bytes as defined below.\nSize in Bytes Meaning 1 Protocol Version: 1 1 Reply Code Reply Code 0 means your request is valid, and the destination service exists, and your meshlet has the right to access the destination service, and Meshless Node Agent establishes a secure tunnel between your meshlet and the destination service.\nIf anything wrong, a dedicated reply code will tell what happened.\nSDK Server-Side To listen at an UDS address, in Go for example, is pretty straightforward:\nnet.Listen(\u0026quot;unix\u0026quot;, udsAddr).\nFor advanced features such as cleaning up UDS file before listening, setting UDS file permission, graceful shutdown, generating connection id, etc., try UDS Server .\nFor HTTP, try HTTP Server over UDS .\nClient-Side To connect to an UDS address, in Go for example, is pretty straightforward:\nnet.Dial(\u0026quot;unix\u0026quot;, udsAddr).\nFor one-line API that connects to and handshakes with Meshless Node Agent, and handles connection timeout and handshake timeout, etc., try Meshless Client .\nFor HTTP, try Meshless HTTP Client .\n","date":"2024-08-05","id":4,"permalink":"/meshless/doc/use/","summary":"\u003ch2 id=\"meshlet\"\u003eMeshlet\u003c/h2\u003e\n\u003cp\u003eA meshlet is a logical entity, which can be a client that uses services provided by other meshlets, or a server that provides services for other meshlets to use, or both.\u003c/p\u003e","tags":[],"title":"Use"},{"content":"Define a Region Define a Region via CR:\napiVersion: ext.burningxflame.github.com/v1 kind: Region metadata: namespace: \u0026lt;ns\u0026gt; name: \u0026lt;name\u0026gt; spec: # the internal port of XTS for the destination region internalPort: \u0026lt;port\u0026gt; # the external (i.e. public) address of XTS of the destination region externalAddr: \u0026lt;host\u0026gt;:\u0026lt;port\u0026gt;\rDefine a Region for each destination region.\nUsually you define Regions to be referenced by Dsts.\nHowever you don\u0026rsquo;t access the internalPort of a Region. This is reserved for implementing advanced features in future.\nDefine a Destination Define a Destination via CR:\napiVersion: ext.burningxflame.github.com/v1 kind: Dst metadata: namespace: \u0026lt;ns\u0026gt; name: \u0026lt;name\u0026gt; spec: # the internal port of XTS for the destination internalPort: \u0026lt;port\u0026gt; # the destination region dstRegion: \u0026lt;ns\u0026gt;/\u0026lt;name\u0026gt; # the destination address in the destination region dstAddr: \u0026lt;host\u0026gt;:\u0026lt;port\u0026gt;\rDefine a Dst for each destination.\nXTS will listen on internalPort. All traffic to internalPort will be routed to dstAddr in dstRegion.\ndstRegion refers to a Region. The format is \u0026lt;namespace\u0026gt;/\u0026lt;name\u0026gt;.\nAccess a Destination The experience of accessing services in other regions is like accessing services in the same region.\nConnect to a Dst by connecting to \u0026lt;xts-dns-name\u0026gt;:\u0026lt;internalPort\u0026gt;.\n\u0026lt;xts-dns-name\u0026gt; is the DNS name generated by K8S for XTS, and defaults to xts.\u0026lt;namespace\u0026gt;.svc.cluster.local, and can be abbreviated to xts.\u0026lt;namespace\u0026gt;, and can be abbreviated to xts if the service which initiates the connection is deployed in the same namespace as XTS.\n\u0026lt;internalPort\u0026gt; is the internalPort of the Dst.\nXTS will establish a secure tunnel between your service and the destination, as if your service is directly connected to the destination.\nProceed to data transmission.\nUniqueness of Port internalPorts should be unique among all ports of XTS in a K8S cluster, otherwise the CR will be rejected.\nRESTful RESTful API is also available. To learn more, view the RESTful API docs .\n","date":"2024-05-29","id":5,"permalink":"/xts/doc/use/","summary":"\u003ch2 id=\"define-a-region\"\u003eDefine a Region\u003c/h2\u003e\n\u003cp\u003eDefine a Region via CR:\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003eapiVersion\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eext.burningxflame.github.com/v1\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003ekind\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003eRegion\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003emetadata\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003enamespace\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003e\u0026lt;ns\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003e\u0026lt;name\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003espec\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c\"\u003e# the internal port of XTS for the destination region\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003einternalPort\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003e\u0026lt;port\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"c\"\u003e# the external (i.e. public) address of XTS of the destination region\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"nt\"\u003eexternalAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"l\"\u003e\u0026lt;host\u0026gt;:\u0026lt;port\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eDefine a \u003ccode\u003eRegion\u003c/code\u003e for each destination region.\u003cbr\u003e\nUsually you define \u003ccode\u003eRegion\u003c/code\u003es to be referenced by \u003ccode\u003eDst\u003c/code\u003es.\u003c/p\u003e","tags":[],"title":"Use"},{"content":"Pricing and Licensing GX Commercial License\nWith the purchase of a commercial license,\nYou may use GX in your own commercial products. Customers and users of your products do not need to purchase their own license, as long as they are not developing their own commercial products with GX. You are entitled to all future versions of GX. Once you purchase a commercial license, an email will be sent to you about the following information:\rA private repository where you download releases of GX. A license file that\u0026rsquo;s required to use GX. Contact For any question about pricing and licensing, contact us ↗.\nFor technical support, contact us ↗.\n","date":"2024-05-06","id":6,"permalink":"/gx/doc/pricing/","summary":"\u003ch2 id=\"pricing-and-licensing\"\u003ePricing and Licensing\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eGX Commercial License\u003c/strong\u003e\u003c/p\u003e\n\u003cscript async src=\"https://js.stripe.com/v3/buy-button.js\"\u003e\u003c/script\u003e\r\n\u003cp\u003e\u003cstripe-buy-button buy-button-id=\"buy_btn_1P2oR4CTgG0b80VrbaoEehJM\"  publishable-key=\"pk_live_51P2kNRCTgG0b80Vrm9YZ9GMMKBiwxq8SNVb6E78CeCcRdNvayNXnWuQBl8TvHTvWLNGcJFFSOvdn5khoHa7tkyio00cmX7l8Mm\"\u003e\u003c/stripe-buy-button\u003e\u003c/p\u003e\n\u003cp\u003eWith the purchase of a commercial license,\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYou may use GX in your own commercial products.\u003c/li\u003e\n\u003cli\u003eCustomers and users of your products do not need to purchase their own license, as long as they are not developing their own commercial products with GX.\u003c/li\u003e\n\u003cli\u003eYou are entitled to all future versions of GX.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\r\nOnce you purchase a commercial license, an email will be sent to you about the following information:\r\n\u003cul\u003e\n\u003cli\u003eA private repository where you download releases of GX.\u003c/li\u003e\n\u003cli\u003eA license file that\u0026rsquo;s required to use GX.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"contact\"\u003eContact\u003c/h2\u003e\n\u003cp\u003eFor any question about pricing and licensing, \u003ca href=\"mailto:sales@bxflame.com?subject=GX Pricing/Licensing\"\u003econtact us ↗\u003c/a\u003e.\u003c/p\u003e","tags":[],"title":"Pricing"},{"content":"Performance 99% Less Resource Consumption than the Competition Problems of Sidecar Pattern of Service Mesh (I) - High Resource Consumption Meshless Solves Problems of Sidecar Pattern of Service Mesh (I) Completely Eliminate the Network Latency Caused by the Competition, Even Eliminate the Network Latency of Direct Communication Problems of Sidecar Pattern of Service Mesh (II) - Significant Increase in Network Latency Meshless Solves Problems of Sidecar Pattern of Service Mesh (II) Real-Time Optimal Routing When routing to a destination service, Meshless connects in parallel to all instances of that service, instantly uses the 1st (i.e. the fastest) successful connection, and aborts others.\nTraffic Management Real-Time Optimal Routing When routing to a destination service, Meshless connects in parallel to all instances of that service, instantly uses the 1st (i.e. the fastest) successful connection, and aborts others.\nCanary Deployment Strategy Canary deployment strategy is used for safely rolling out a new version of a service, by first testing it using a small percentage of traffic, gradually directing more traffic to the new version, and finally directing all traffic to the new version.\nYou may declare the canary deployment strategy of your meshlet when defining a meshlet and attaching Meshlet label to workload definition .\nAccess Control Access control determines whether a service is allowed to access another service.\nYou declare access control when defining a meshlet .\nCircuit Breaker Meshless limits max number of concurrent connections to your services.\nYou specify the max number of concurrent connections to your service when defining a meshlet .\nIdle Timeout If no data is sent from a connection within the specified duration, Meshless will close the connection.\nYou specify the idle timeout for your service when defining a meshlet .\nSecurity Secure Tunnels Meshless establishes secure tunnels between your services, without your services having to touch TLS certificates or even know about TLS.\nAccess Control Access control determines whether a service is allowed to access another service.\nYou declare access control when defining a meshlet .\nDefend Against DDoS Attacks Meshless limits max number of concurrent connections to itself, and to your services as well.\nYou specify the max number of concurrent connections to your service when defining a meshlet .\nDefend Against Slow Attacks If a handshake is not completed within the specified duration, Meshless will close the connection.\nClose Idle Connections If no data is sent from a connection within the specified duration, Meshless will close the connection.\nYou specify the idle timeout for your service when defining a meshlet .\nScalability Horizontal Scaling Meshless is horizontally scalable, and effortlessly scales as your business grows. In theory, there\u0026rsquo;s no scalability cap.\nReliability Truly Distributed, Load Balanced Meshless is Truly Distributed, Load Balanced and Horizontally Scalable.\nAll instances are active. Each instance handles a portion of workload.\nThis architecture provides the best scalability and reliability.\nEstablished Connections Remain Intact on Config Changes All established connections remain intact on config changes.\nSee also Goroutine-level Guardian Zero Downtime During Scaling Out/In Meshless is Truly Distributed, Load Balanced and Horizontally Scalable, and thus zero downtime during scaling out/in.\nZero Downtime During Upgrade Meshless is Truly Distributed, Load Balanced and Horizontally Scalable, and thus zero downtime during upgrade.\nZero Downtime on Temporary Errors Zero downtime on temporary errors. Auto-recover on temporary errors.\nSee also Goroutine-level Guardian Zero Downtime on Process Crash Zero downtime on process crash. Auto-recover on process crash.\nSee also Process-level Guardian Deployment Docker Image and Helm Chart Docker images and Helm charts are provided to enable you to install/upgrade Meshless in a flash.\nUpgrade Seamlessly Upgrade to a New Version Backward compatibility guaranteed.\nTo upgrade to a new version, just download the new release and run helm upgrade and that’s it.\n","date":"2024-08-07","id":7,"permalink":"/meshless/doc/features/","summary":"\u003ch2 id=\"performance\"\u003ePerformance\u003c/h2\u003e\n\u003ch3 id=\"99-less-resource-consumption-than-the-competition\"\u003e99% Less Resource Consumption than the Competition\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"../intro/#high-resource-consumption\"  \u003e\n    Problems of Sidecar Pattern of Service Mesh (I) - High Resource Consumption\n    \n\u003c/a\u003e\n\u003c/p\u003e","tags":[],"title":"Features"},{"content":"v1.3.0 2024-10-22\nCategory Feature Stream Processing Basic Types / Event Stream Processing Basic Types / Source Stream Processing Basic Types / Sink Stream Processing Basic Types / Processor Stream Processing Basic Types / Stream Processing Stream Processing Basic Processors / Filter Stream Processing Basic Processors / Map Stream Processing Basic Processors / Reduce Stream Processing Basic Processors / Keyed Reduce Stream Processing Count Window Processors / Tumbling Window Stream Processing Count Window Processors / Keyed Tumbling Window Stream Processing Count Window Processors / Sliding Window Stream Processing Count Window Processors / Keyed Sliding Window Stream Processing Time Window Processors / Tumbling Window Stream Processing Time Window Processors / Keyed Tumbling Window Stream Processing Time Window Processors / Sliding Window Stream Processing Time Window Processors / Keyed Sliding Window Stream Processing Time Window Processors / Session Window Stream Processing Time Window Processors / Keyed Session Window Stream Processing Composite Processors / Chain Stream Processing Composite Processors / Distribute Stream Processing Composite Processors / Compound Stream Processing Composite Sources / Multi-Source Stream Processing Composite Sinks / Multi-Sink Generic Data Structures Sorted Slice v1.2.0 2024-08-08\nCategory Feature Net BiCopy Net FakeConn/NewPair Net Idle Timeout Sync Generic Concurrency-Safe Map Sync Generic Concurrency-Safe Set Unix Domain Socket UDS Server Unix Domain Socket Meshless Client Unix Domain Socket Meshless HTTP Client Note:\n\u0026ldquo;Net / Idle Timeout\u0026rdquo; is just \u0026ldquo;Secure / Idle Timeout\u0026rdquo;. \u0026ldquo;Secure / Idle Timeout\u0026rdquo; is deprecated. For backward compatibility, \u0026ldquo;Secure / Idle Timeout\u0026rdquo; is still kept. \u0026ldquo;Secure / Idle Timeout\u0026rdquo; uses \u0026ldquo;Net / Idle Timeout\u0026rdquo; internally. v1.1.0 2024-07-03\nCategory Feature Net Fake Conn Secure Secure HTTP Server v1.0.0 2024-06-05\nCategory Feature Generic Data Structures Auto-scalable Ring Buffer Generic Data Structures Double Ended Queue Generic Data Structures Queue Generic Data Structures Stack Generic Data Structures Heap Generic Data Structures Set Generic Iterator with Lazy Evaluation From other types to Iterators Generic Iterator with Lazy Evaluation Iterator Transformations Generic Iterator with Lazy Evaluation Pipelines of Iterators Generic Iterator with Lazy Evaluation Drain Iterators Generic Iterator with Lazy Evaluation From Iterators to other types ID NanoID ID UUID Logging Logging Facade Logging Light Logger Logging Concurrent Buffer Writer Logging Auto-Flusher Logging Log Rotator Logging Extension Net Connection Pool Net SOCKS5 Reliable Process-Level Guardian Reliable Goroutine-Level Guardian Reliable Auto-Reload on Config Changes Reliable Backoff Reliable Readiness Reliable Timeout Decorator Runtime Goroutine ID Runtime Goroutine Local Storage Runtime G2G Secure Secure TCP Server Secure Idle Timeout Sync Semaphore Sync Keyed-Semaphores Unix Domain Socket HTTP Server over UDS Unix Domain Socket HTTP Client over UDS ","date":"2024-07-03","id":8,"permalink":"/gx/doc/release/","summary":"\u003ch2 id=\"v130\"\u003ev1.3.0\u003c/h2\u003e\n\u003cp\u003e2024-10-22\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eCategory\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eFeature\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBasic Types / Event\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBasic Types / Source\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBasic Types / Sink\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBasic Types / Processor\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBasic Types / Stream Processing\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBasic Processors / Filter\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBasic Processors / Map\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBasic Processors / Reduce\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBasic Processors / Keyed Reduce\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCount Window Processors / Tumbling Window\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCount Window Processors / Keyed Tumbling Window\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCount Window Processors / Sliding Window\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCount Window Processors / Keyed Sliding Window\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eTime Window Processors / Tumbling Window\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eTime Window Processors / Keyed Tumbling Window\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eTime Window Processors / Sliding Window\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eTime Window Processors / Keyed Sliding Window\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eTime Window Processors / Session Window\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eTime Window Processors / Keyed Session Window\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eComposite Processors / Chain\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eComposite Processors / Distribute\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eComposite Processors / Compound\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eComposite Sources / Multi-Source\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eStream Processing\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eComposite Sinks / Multi-Sink\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eGeneric Data Structures\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSorted Slice\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"v120\"\u003ev1.2.0\u003c/h2\u003e\n\u003cp\u003e2024-08-08\u003c/p\u003e","tags":[],"title":"Release History"},{"content":"Function Cross-Region Transmission XTS establishes secure tunnels between regions, and enables cross-region transmission.\nMultiple Regions XTS supports multiple regions. You may define as many regions as you like.\nSecurity Secure Tunnels XTS establishes secure tunnels between regions, and enables cross-region transmission without exposing public IP-ports for your services which need cross-region transmission.\nMinimize Attack Surface XTS minimizes attack surface. Only one public IP-port, i.e. the public IP-port of XTS, of each region is exposed to public networks.\nProtect Services From Being Exposed to Public Networks XTS protects your services from being exposed to public networks. Your services can only be accessed from within your regions.\nReject Connections From Public Networks XTS rejects connections from public networks, except connections from XTS of another region of yours.\nDefend Against DDoS Attacks XTS limits max number of concurrent connections in total, and per client as well.\nDefend Against Slow Attacks If a handshake is not completed within the specified duration, XTS will close the connection.\nClose Idle Connections If no data is sent from a connection within the specified duration, XTS will close the connection.\nScalability Horizontal Scaling XTS is horizontally scalable. In theory, there\u0026rsquo;s no scalability cap, i.e. you can achieve unlimited throughput by specifying an unlimited number of replicas.\nReliability Truly Distributed, Load Balanced XTS is Truly Distributed, Load Balanced and Horizontally Scalable.\nAll instances are active. Each instance handles a portion of workload.\nThis architecture provides the best scalability and reliability.\nEstablished Connections Remain Intact on Config Changes All established connections remain intact on config changes.\nSee also Goroutine-level Guardian Zero Downtime During Scaling Out/In XTS is Truly Distributed, Load Balanced and Horizontally Scalable, and thus zero downtime during scaling out/in.\nZero Downtime During Upgrade XTS is Truly Distributed, Load Balanced and Horizontally Scalable, and thus zero downtime during upgrade.\nZero Downtime on Temporary Errors Zero downtime on temporary errors. Auto-recover on temporary errors.\nSee also Goroutine-level Guardian Zero Downtime on Process Crash Zero downtime on process crash. Auto-recover on process crash.\nSee also Process-level Guardian API CR See Use for details.\nRESTful See RESTful for details.\nDeployment Docker Image and Helm Chart Docker images and Helm charts are provided to enable you to install/upgrade XTS in a flash.\nUpgrade Seamlessly Upgrade to a New Version Backward compatibility guaranteed.\nTo upgrade to a new version, just download the new release and run helm upgrade and that’s it.\n","date":"2024-05-30","id":9,"permalink":"/xts/doc/features/","summary":"\u003ch2 id=\"function\"\u003eFunction\u003c/h2\u003e\n\u003ch3 id=\"cross-region-transmission\"\u003eCross-Region Transmission\u003c/h3\u003e\n\u003cp\u003eXTS establishes secure tunnels between regions, and enables cross-region transmission.\u003c/p\u003e\n\u003ch3 id=\"multiple-regions\"\u003eMultiple Regions\u003c/h3\u003e\n\u003cp\u003eXTS supports multiple regions. You may define as many regions as you like.\u003c/p\u003e","tags":[],"title":"Features"},{"content":"Function Define a Job Just define a job via CR. The job will reliably run as expected.\nLet\u0026rsquo;s start with the simplest example.\napiVersion: ext.burningxflame.github.com/v1 kind: CronJob metadata: namespace: \u0026lt;ns\u0026gt; name: \u0026lt;name\u0026gt; spec: # schedule expression expr: \u0026#34;* * * * *\u0026#34; # regularly called on the specified schedule callback: http: url: http://\u0026lt;host\u0026gt;/\u0026lt;path\u0026gt; # other fields ...\rRESTful API is also available.\nCron Job Use cron expressions to represent schedules.\ne.g.\napiVersion: ext.burningxflame.github.com/v1 kind: CronJob metadata: namespace: \u0026lt;ns\u0026gt; name: \u0026lt;name\u0026gt; spec: expr: \u0026#34;* * * * *\u0026#34; # cron expression # other fields ...\rAn optional second field is also accepted, besides the standard cron spec.\nThe format of expr is:\n[second] \u0026lt;minute\u0026gt; \u0026lt;hour\u0026gt; \u0026lt;day of month\u0026gt; \u0026lt;month\u0026gt; \u0026lt;day of week\u0026gt;\nTime Zone By default, all cron jobs are scheduled in local time zone.\nYou can specify a different time zone.\ne.g.\napiVersion: ext.burningxflame.github.com/v1 kind: CronJob metadata: namespace: \u0026lt;ns\u0026gt; name: \u0026lt;name\u0026gt; spec: expr: \u0026#34;CRON_TZ=America/New_York * 1 * * *\u0026#34; # cron expression with time zone # other fields ...\rThe format of expr is:\n[tz] [second] \u0026lt;minute\u0026gt; \u0026lt;hour\u0026gt; \u0026lt;day of month\u0026gt; \u0026lt;month\u0026gt; \u0026lt;day of week\u0026gt;\nPeriodic Job Schedule a job at a fixed interval.\ne.g.\napiVersion: ext.burningxflame.github.com/v1 kind: CronJob metadata: namespace: \u0026lt;ns\u0026gt; name: \u0026lt;name\u0026gt; spec: expr: \u0026#34;@every 1m\u0026#34; # fixed interval # other fields ...\rThe format of expr is @every \u0026lt;duration\u0026gt;, where \u0026lt;duration\u0026gt; is a duration string in the format defined by Go time.ParseDuration ↗ .\nHTTP Callback Regularly send an HTTP Post request without header nor body, to the specified url.\ne.g.\napiVersion: ext.burningxflame.github.com/v1 kind: CronJob metadata: namespace: \u0026lt;ns\u0026gt; name: \u0026lt;name\u0026gt; spec: callback: # regularly called on the specified schedule http: # HTTP Post request url: http://\u0026lt;host\u0026gt;/\u0026lt;path\u0026gt; # other fields ...\rHTTP Callback with Header and/or Body Regularly send an HTTP Post request with header and/or body, to the specified url.\ne.g.\napiVersion: ext.burningxflame.github.com/v1 kind: CronJob metadata: namespace: \u0026lt;ns\u0026gt; name: \u0026lt;name\u0026gt; spec: callback: # regularly called on the specified schedule http: # HTTP Post request url: http://\u0026lt;host\u0026gt;/\u0026lt;path\u0026gt; header: Content-Type: application/x-www-form-urlencoded body: xda=lafayl\u0026amp;cet=hvesud # other fields ...\rTCP Callback Regularly connect to the specified TCP address, send the specified body, and expect to receive the specified ack.\ne.g.\napiVersion: ext.burningxflame.github.com/v1 kind: CronJob metadata: namespace: \u0026lt;ns\u0026gt; name: \u0026lt;name\u0026gt; spec: callback: # regularly called on the specified schedule tcp: addr: \u0026lt;host\u0026gt;:\u0026lt;port\u0026gt; # the TCP address to be connected body: qgBTpMtbXWnzVCXMv50OLA== # the data to be sent. base64 encoded. ack: LI67iYenlxY= # the data expected to be received. base64 encoded. # other fields ...\rHTTP over UDS Callback Similiar to HTTP callback, but over UDS. Only supported in Meshless mode.\ne.g.\napiVersion: ext.burningxflame.github.com/v1 kind: CronJob metadata: namespace: \u0026lt;ns\u0026gt; name: \u0026lt;name\u0026gt; spec: callback: # regularly called on the specified schedule httpUds: # HTTP Post request over UDS svcId: ... # the destination meshlet service url: http://\u0026lt;host\u0026gt;/\u0026lt;path\u0026gt; # the \u0026lt;host\u0026gt; here doesn\u0026#39;t matter header: Content-Type: application/x-www-form-urlencoded body: xda=lafayl\u0026amp;cet=hvesud # other fields ...\rSee also\nService ID HTTP Callback HTTP Callback with Header and/or Body UDS Callback Similiar to TCP callback, but via UDS instead. Only supported in Meshless mode.\ne.g.\napiVersion: ext.burningxflame.github.com/v1 kind: CronJob metadata: namespace: \u0026lt;ns\u0026gt; name: \u0026lt;name\u0026gt; spec: callback: # regularly called on the specified schedule uds: svcId: ... # the destination meshlet service body: qgBTpMtbXWnzVCXMv50OLA== # the data to be sent. base64 encoded. ack: LI67iYenlxY= # the data expected to be received. base64 encoded. # other fields ...\rSee also\nService ID TCP Callback Callback with Retry Callbacks can be retried in case of error.\ne.g.\napiVersion: ext.burningxflame.github.com/v1 kind: CronJob metadata: namespace: \u0026lt;ns\u0026gt; name: \u0026lt;name\u0026gt; spec: callback: retryTimes: 2 # number of retries retryInterval: 3s # the time to wait between retries # other fields ...\rThe format of retryInterval is defined by Go time.ParseDuration ↗ .\nCallback with Timeout Callbacks can be abandoned if the call does not finish in a specified duration.\ne.g.\napiVersion: ext.burningxflame.github.com/v1 kind: CronJob metadata: namespace: \u0026lt;ns\u0026gt; name: \u0026lt;name\u0026gt; spec: callback: timeout: 3s # other fields ...\rThe format of timeout is defined by Go time.ParseDuration ↗ .\nTime Zone Change You can change the local time zone at runtime, and it takes effect immediately.\nAll cron jobs without specific time zone will be scheduled in the new local time zone.\nJob History Job execution history is recored.\nYou can specify history size. Only the latest n (history size) execution records of every job are kept.\nLimit Schedule Times You can limit how many times a job can be scheduled.\ne.g.\napiVersion: ext.burningxflame.github.com/v1 kind: CronJob metadata: namespace: \u0026lt;ns\u0026gt; name: \u0026lt;name\u0026gt; spec: times: 12 # limit how many times a job can be scheduled # other fields ...\rIf times is specified and the job exceeds that limit, the job becomes ineffective, i.e. it won\u0026rsquo;t be scheduled any more.\nYou can modify times if you like. e.g. if you extend times of an ineffective job, the job will be scheduled again until it exceeds the new limit.\nYou can remove times, which is default, and the job will be scheduled forever.\nScalability Horizontal Scaling DCS Enterprise is horizontally scalable. In theory, there\u0026rsquo;s no scalability cap, i.e. you can achieve unlimited throughput by specifying an unlimited number of replicas.\nReliability Truly Distributed, Load Balanced Truly Distributed, Load Balanced and Horizontally Scalable.\nAll instances are active. Each instance handles a portion of workload.\nThis architecture provides the best scalability and reliability.\nZero Downtime During Scaling Out/In Truly Distributed, Load Balanced and Horizontally Scalable, and thus zero downtime during scaling out/in.\nZero Downtime During Upgrade Truly Distributed, Load Balanced and Horizontally Scalable, and thus zero downtime during upgrade.\nZero Downtime on Time Zone Changes See also Time Zone Change .\nTime zone changes are automatically detected and applied at runtime with zero downtime.\nZero Downtime on Temporary Errors Auto-recover on temporary errors. Zero downtime.\nSee also Goroutine-level Guardian Zero Downtime on Process Crash Auto-recover on process crash. Zero downtime.\nSee also Process-level Guardian Deployment Docker Image and Helm Chart Docker images and Helm charts are provided to enable you to install/upgrade DCS in a flash.\nUpgrade Seamlessly Upgrade to a New Version Backward compatibility guaranteed.\nTo upgrade to a new version, just download the new release and run helm upgrade and that\u0026rsquo;s it.\nSeamlessly Upgrade from Pro to Enterprise DCS Enterprise is backward compatible with DCS Pro.\nTo upgrade from Pro to Enterprise, just download a release of DCS Enterprise and run helm upgrade and that\u0026rsquo;s it.\n","date":"2024-05-06","id":10,"permalink":"/dcs/doc/features/","summary":"\u003ch2 id=\"function\"\u003eFunction\u003c/h2\u003e\n\u003ch3 id=\"define-a-job\"\u003eDefine a Job\u003c/h3\u003e\n\u003cp\u003eJust define a job via CR. The job will reliably run as expected.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s start with the simplest example.\u003c/p\u003e","tags":[],"title":"Features"},{"content":"Adaptive and Fair Hierarchical Transmission Control.\nHierarchical For example,\nthe bandwidth is 1G/s there are three priorities: S, A, and B, and the bandwidth ratio is 5:3:2. then the bandwidth of each priority is: S 500M/s, A 300M/s, B 200M/s,\neven if the original speed of some priority is higher than its quota.\nProblem of Hierarchical Transmission Control Continue with the previous example.\nSometimes S hasn\u0026rsquo;t used up its quota, while A and B have used up their quotas and want to use more. However, in Hierarchical Transmission Control, the unused quota of S can\u0026rsquo;t be used by A and B, causing a waste of bandwidth.\nAdaptive Continue with the previous example.\nATC adapts to real-time traffic, and allocates the unused quota of a priority to others proportionally, and thus prevents the problem of hierarchical transmission control from occurring.\nProblem of Free Competition In free competition, some transmissions take up a lot of bandwidth because they have a competitive advantage, causing others to be too slow or even starving.\nFair Continue with the previous example.\nATC treats transmissions of the same priority fairly to prevent the problem of free competition from occurring.\nBy the way, similar to Adaptive , ATC adapts to real-time traffic, and allocates the unused quota of a transmission to others fairly.\n","date":"2024-05-30","id":11,"permalink":"/xts/doc/atc/","summary":"\u003cp\u003eAdaptive and Fair Hierarchical Transmission Control.\u003c/p\u003e\n\u003ch3 id=\"hierarchical\"\u003eHierarchical\u003c/h3\u003e\n\u003cp\u003e\r\n\r\n\u003cimg\r\n  src=\"/xts/doc/img/atc-1_hu712084771450467121.webp\"\r\n  width=\"2504\"\r\n  height=\"1766\"\r\n  decoding=\"async\"\r\n  fetchpriority=\"auto\"\r\n  loading=\"lazy\"\r\n  alt=\" \"id=\"h-rh-i-0\"\r\n/\u003e\u003c/p\u003e\n\u003cp\u003eFor example,\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ethe bandwidth is 1G/s\u003c/li\u003e\n\u003cli\u003ethere are three priorities: S, A, and B, and the bandwidth ratio is 5:3:2.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ethen the bandwidth of each priority is: S 500M/s, A 300M/s, B 200M/s,\u003cbr\u003e\neven if the original speed of some priority is higher than its quota.\u003c/p\u003e","tags":[],"title":"ATC"},{"content":"Pricing and Licensing DCS Commercial Pro License\nDCS Commercial Enterprise License\n14-Day 100% Money-Back Guarantee.\nCategory Feature DCS Pro DCS Enterprise Audience Small Business Medium to Large Companies Function Cron Job ✅ ✅ Function Time Zone ✅ ✅ Function Periodic Job ✅ ✅ Function HTTP Callback ✅ ✅ Function HTTP Callback with Header and/or Body ✅ ✅ Function TCP Callback ✅ ✅ Function HTTP over UDS Callback - ✅ Function HTTP over UDS Callback with Header and/or Body - ✅ Function UDS Callback - ✅ Function Callback with Retry - ✅ Function Callback with Timeout - ✅ Function Time Zone Change - ✅ Function Job History - ✅ Function Limit Schedule Times - ✅ Scalability Vertical Scaling ✅ ✅ Scalability Horizontal Scaling - ✅ Reliability Architecture Active-Standby Truly Distributed,\nLoad Balanced,\nHorizontally Scalable Reliability Zero Downtime During Scaling Out/In - ✅ Reliability Zero Downtime During Upgrade - ✅ Reliability Zero Downtime on Time Zone Changes - ✅ Reliability Zero Downtime on Temporary Errors - ✅ Reliability Zero Downtime on Process Crash - ✅ API CR ✅ ✅ API RESTful ✅ ✅ Deployment Docker Image and Helm Chart ✅ ✅ Upgrade Seamlessly Upgrade to a New Version ✅ ✅ Upgrade Seamlessly Upgrade from Pro - ✅ With the purchase of a commercial license,\nyou may install and run the Software on an unlimited number of Hosts. You are entitled to all future versions of the Software. \u0026ldquo;Software\u0026rdquo; means DCS Pro or Enterprise depending on which license you purchase.\n\u0026ldquo;Host\u0026rdquo; means any physical or virtual machine which is controlled by you.\nOnce you purchase a commercial license, an email will be sent to you about the following information:\rA private repository where you download releases of the Software.\nNote: If you use AWS, you may get releases of the Software from AWS Marketplace. A license file that\u0026rsquo;s required to install and run the Software. Contact For any question about pricing and licensing, contact us ↗.\nFor technical support, contact us ↗.\n","date":"2024-05-06","id":12,"permalink":"/dcs/doc/pricing/","summary":"\u003ch2 id=\"pricing-and-licensing\"\u003ePricing and Licensing\u003c/h2\u003e\n\u003cdiv class=\"row text-center align-items-center\"\u003e\r\n\u003cdiv class=\"col-lg-7\"\u003e\r\n\u003cp\u003e\u003cstrong\u003eDCS Commercial Pro License\u003c/strong\u003e\u003c/p\u003e\n\u003cscript async src=\"https://js.stripe.com/v3/buy-button.js\"\u003e\u003c/script\u003e\r\n\u003cp\u003e\u003cstripe-buy-button buy-button-id=\"buy_btn_1QbvULCTgG0b80VrWZcknvBU\"  publishable-key=\"pk_live_51P2kNRCTgG0b80Vrm9YZ9GMMKBiwxq8SNVb6E78CeCcRdNvayNXnWuQBl8TvHTvWLNGcJFFSOvdn5khoHa7tkyio00cmX7l8Mm\"\u003e\u003c/stripe-buy-button\u003e\u003c/p\u003e\n\u003c/div\u003e\r\n\u003cdiv class=\"col-lg-8\"\u003e\r\n\u003cp\u003e\u003cstrong\u003eDCS Commercial Enterprise License\u003c/strong\u003e\u003c/p\u003e\n\u003cscript async src=\"https://js.stripe.com/v3/buy-button.js\"\u003e\u003c/script\u003e\r\n\u003cp\u003e\u003cstripe-buy-button buy-button-id=\"buy_btn_1QbvVcCTgG0b80VrOeY3P8LX\"  publishable-key=\"pk_live_51P2kNRCTgG0b80Vrm9YZ9GMMKBiwxq8SNVb6E78CeCcRdNvayNXnWuQBl8TvHTvWLNGcJFFSOvdn5khoHa7tkyio00cmX7l8Mm\"\u003e\u003c/stripe-buy-button\u003e\u003c/p\u003e","tags":[],"title":"Pricing"},{"content":"Pricing and Licensing Meshless Commercial License\n14-Day 100% Money-Back Guarantee.\nWith the purchase of a commercial license,\ryou may install and run the Software on an unlimited number of Hosts. You are entitled to all future versions of the Software. \u0026ldquo;Software\u0026rdquo; means Meshless.\n\u0026ldquo;Host\u0026rdquo; means any physical or virtual machine which is controlled by you.\nOnce you purchase a commercial license, an email will be sent to you about the following information:\rA private repository where you download releases of the Software.\nNote: If you use AWS, you may get releases of the Software from AWS Marketplace. A license file that\u0026rsquo;s required to install and run the Software. Contact For any question about pricing and licensing, contact us ↗.\nFor technical support, contact us ↗.\n","date":"2024-08-07","id":13,"permalink":"/meshless/doc/pricing/","summary":"\u003ch2 id=\"pricing-and-licensing\"\u003ePricing and Licensing\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eMeshless Commercial License\u003c/strong\u003e\u003c/p\u003e\n\u003cscript async src=\"https://js.stripe.com/v3/buy-button.js\"\u003e\u003c/script\u003e\r\n\u003cp\u003e\u003cstripe-buy-button buy-button-id=\"buy_btn_1Qbu1ICTgG0b80VrBQ4uxNS8\"  publishable-key=\"pk_live_51P2kNRCTgG0b80Vrm9YZ9GMMKBiwxq8SNVb6E78CeCcRdNvayNXnWuQBl8TvHTvWLNGcJFFSOvdn5khoHa7tkyio00cmX7l8Mm\"\u003e\u003c/stripe-buy-button\u003e\u003c/p\u003e\n\u003cp\u003e14-Day 100% Money-Back Guarantee.\u003c/p\u003e\n\u003cbr\u003e\r\nWith the purchase of a commercial license,\r\n\u003cul\u003e\n\u003cli\u003eyou may install and run the Software on an unlimited number of Hosts.\u003c/li\u003e\n\u003cli\u003eYou are entitled to all future versions of the Software.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u0026ldquo;Software\u0026rdquo; means Meshless.\u003cbr\u003e\n\u0026ldquo;Host\u0026rdquo; means any physical or virtual machine which is controlled by you.\u003c/p\u003e","tags":[],"title":"Pricing"},{"content":"Pricing and Licensing XTS Commercial License\nXTS Commercial Add-On License\n14-Day 100% Money-Back Guarantee.\nWith the purchase of a commercial license,\ryou may install and run the Software on an unlimited number of Hosts. You are entitled to all future versions of the Software. \u0026ldquo;Software\u0026rdquo; means XTS or XTS Add-on depending on which license you purchase.\n\u0026ldquo;Host\u0026rdquo; means any physical or virtual machine which is controlled by you.\nOnce you purchase a commercial license, an email will be sent to you about the following information:\rA private repository where you download releases of the Software.\nNote: If you use AWS, you may get releases of the Software from AWS Marketplace. A license file that\u0026rsquo;s required to install and run the Software. Contact For any question about pricing and licensing, contact us ↗.\nFor technical support, contact us ↗.\n","date":"2024-05-30","id":14,"permalink":"/xts/doc/pricing/","summary":"\u003ch2 id=\"pricing-and-licensing\"\u003ePricing and Licensing\u003c/h2\u003e\n\u003cdiv class=\"row text-center align-items-center\"\u003e\r\n\u003cdiv class=\"col-lg-7\"\u003e\r\n\u003cp\u003e\u003cstrong\u003eXTS Commercial License\u003c/strong\u003e\u003c/p\u003e\n\u003cscript async src=\"https://js.stripe.com/v3/buy-button.js\"\u003e\u003c/script\u003e\r\n\u003cp\u003e\u003cstripe-buy-button buy-button-id=\"buy_btn_1Qbv0ECTgG0b80Vr4zZr1p7v\"  publishable-key=\"pk_live_51P2kNRCTgG0b80Vrm9YZ9GMMKBiwxq8SNVb6E78CeCcRdNvayNXnWuQBl8TvHTvWLNGcJFFSOvdn5khoHa7tkyio00cmX7l8Mm\"\u003e\u003c/stripe-buy-button\u003e\u003c/p\u003e\n\u003c/div\u003e\r\n\u003cdiv class=\"col-lg-7\"\u003e\r\n\u003cp\u003e\u003cstrong\u003eXTS Commercial Add-On License\u003c/strong\u003e\u003c/p\u003e\n\u003cscript async src=\"https://js.stripe.com/v3/buy-button.js\"\u003e\u003c/script\u003e\r\n\u003cp\u003e\u003cstripe-buy-button buy-button-id=\"buy_btn_1Qbv9dCTgG0b80VrfxrLLh4X\"  publishable-key=\"pk_live_51P2kNRCTgG0b80Vrm9YZ9GMMKBiwxq8SNVb6E78CeCcRdNvayNXnWuQBl8TvHTvWLNGcJFFSOvdn5khoHa7tkyio00cmX7l8Mm\"\u003e\u003c/stripe-buy-button\u003e\u003c/p\u003e","tags":[],"title":"Pricing"},{"content":"Create/Update a Region Request\nMethod: PUT\nURL: https://\u0026lt;host:port\u0026gt;/regions/\u0026lt;namespace\u0026gt;/\u0026lt;name\u0026gt;\nHeader: Content-Type: application/json\nBody:\n{ \u0026#34;internalPort\u0026#34;: \u0026lt;port\u0026gt;, \u0026#34;externalAddr\u0026#34;: \u0026#34;\u0026lt;host\u0026gt;:\u0026lt;port\u0026gt;\u0026#34; }\rView Use for detailed description of each field.\nResponse\nOK StatusCode: 200 Body: {\u0026quot;msg\u0026quot;: \u0026quot;OK\u0026quot;} Invalid StatusCode: 400 Body: {\u0026quot;msg\u0026quot;: \u0026quot;\u0026lt;validation error\u0026gt;\u0026quot;} Unprocessable StatusCode: 422 Body: {\u0026quot;msg\u0026quot;: \u0026quot;\u0026lt;error\u0026gt;\u0026quot;} Get a Region Request\nMethod: GET URL: https://\u0026lt;host:port\u0026gt;/regions/\u0026lt;namespace\u0026gt;/\u0026lt;name\u0026gt; Response\nOK\nStatusCode: 200 Body: { \u0026#34;ns\u0026#34;: \u0026#34;\u0026lt;namespace\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;\u0026lt;name\u0026gt;\u0026#34;, \u0026#34;internalPort\u0026#34;: \u0026lt;port\u0026gt;, \u0026#34;externalAddr\u0026#34;: \u0026#34;\u0026lt;host\u0026gt;:\u0026lt;port\u0026gt;\u0026#34;, }\rNot Found\nStatusCode: 404 Body: {\u0026quot;msg\u0026quot;:\u0026quot;not found\u0026quot;} Unprocessable\nStatusCode: 422 Body: {\u0026quot;msg\u0026quot;: \u0026quot;\u0026lt;error\u0026gt;\u0026quot;} Delete a Region Request\nMethod: DELETE URL: https://\u0026lt;host:port\u0026gt;/regions/\u0026lt;namespace\u0026gt;/\u0026lt;name\u0026gt; Response\nOK StatusCode: 200 Body: {\u0026quot;msg\u0026quot;: \u0026quot;OK\u0026quot;} Not Found\nSame as OK. Unprocessable StatusCode: 422 Body: {\u0026quot;msg\u0026quot;: \u0026quot;\u0026lt;error\u0026gt;\u0026quot;} Create/Update a Destination Request\nMethod: PUT\nURL: https://\u0026lt;host:port\u0026gt;/dsts/\u0026lt;namespace\u0026gt;/\u0026lt;name\u0026gt;\nHeader: Content-Type: application/json\nBody:\n{ \u0026#34;internalPort\u0026#34;: \u0026lt;port\u0026gt;, \u0026#34;dstRegion\u0026#34;: \u0026#34;\u0026lt;ns\u0026gt;/\u0026lt;name\u0026gt;\u0026#34;, \u0026#34;dstAddr\u0026#34;: \u0026#34;\u0026lt;host\u0026gt;:\u0026lt;port\u0026gt;\u0026#34; }\rView Use for detailed description of each field.\nResponse\nOK StatusCode: 200 Body: {\u0026quot;msg\u0026quot;: \u0026quot;OK\u0026quot;} Invalid StatusCode: 400 Body: {\u0026quot;msg\u0026quot;: \u0026quot;\u0026lt;validation error\u0026gt;\u0026quot;} Unprocessable StatusCode: 422 Body: {\u0026quot;msg\u0026quot;: \u0026quot;\u0026lt;error\u0026gt;\u0026quot;} Get a Destination Request\nMethod: GET URL: https://\u0026lt;host:port\u0026gt;/dsts/\u0026lt;namespace\u0026gt;/\u0026lt;name\u0026gt; Response\nOK\nStatusCode: 200 Body: { \u0026#34;ns\u0026#34;: \u0026#34;\u0026lt;namespace\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;\u0026lt;name\u0026gt;\u0026#34;, \u0026#34;internalPort\u0026#34;: \u0026lt;port\u0026gt;, \u0026#34;dstRegion\u0026#34;: \u0026#34;\u0026lt;ns\u0026gt;/\u0026lt;name\u0026gt;\u0026#34;, \u0026#34;dstAddr\u0026#34;: \u0026#34;\u0026lt;host\u0026gt;:\u0026lt;port\u0026gt;\u0026#34; }\rNot Found\nStatusCode: 404 Body: {\u0026quot;msg\u0026quot;:\u0026quot;not found\u0026quot;} Unprocessable\nStatusCode: 422 Body: {\u0026quot;msg\u0026quot;: \u0026quot;\u0026lt;error\u0026gt;\u0026quot;} Delete a Destination Request\nMethod: DELETE URL: https://\u0026lt;host:port\u0026gt;/dsts/\u0026lt;namespace\u0026gt;/\u0026lt;name\u0026gt; Response\nOK StatusCode: 200 Body: {\u0026quot;msg\u0026quot;: \u0026quot;OK\u0026quot;} Not Found\nSame as OK. Unprocessable StatusCode: 422 Body: {\u0026quot;msg\u0026quot;: \u0026quot;\u0026lt;error\u0026gt;\u0026quot;} Host:Port \u0026lt;xts-dns-name\u0026gt;:\u0026lt;port\u0026gt;.\n\u0026lt;xts-dns-name\u0026gt; is the DNS name generated by K8S for XTS,\nand defaults to xts.\u0026lt;namespace\u0026gt;.svc.cluster.local,\nand can be abbreviated to xts.\u0026lt;namespace\u0026gt;,\nand can be abbreviated to xts if the service which sends the request is deployed in the same namespace as XTS.\n\u0026lt;port\u0026gt; defaults to 1060.\nMutual TLS Authentication XTS and client authenticate each other during TLS handshake.\nDefend Against DDoS Attacks XTS limits max number of concurrent requests. Configurable at deployment time.\nSee also Secure HTTP Server ","date":"2024-06-25","id":15,"permalink":"/xts/doc/rest/","summary":"\u003ch2 id=\"createupdate-a-region\"\u003eCreate/Update a Region\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRequest\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eMethod: \u003ccode\u003ePUT\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eURL: \u003ccode\u003ehttps://\u0026lt;host:port\u0026gt;/regions/\u0026lt;namespace\u0026gt;/\u0026lt;name\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eHeader: \u003ccode\u003eContent-Type: application/json\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eBody:\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;internalPort\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"err\"\u003e\u0026lt;port\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026#34;externalAddr\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026lt;host\u0026gt;:\u0026lt;port\u0026gt;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eView \u003ca href=\"../use/#define-a-region\"  \u003e\n    Use\n    \n\u003c/a\u003e\n for detailed description of each field.\u003c/p\u003e","tags":[],"title":"RESTful"},{"content":"Create/Update a Job Request\nMethod: PUT\nURL: https://\u0026lt;host:port\u0026gt;/jobs/\u0026lt;namespace\u0026gt;/\u0026lt;name\u0026gt;\nHeader: Content-Type: application/json\nBody:\nAs follows are some of the fields. To learn more, view the Complete List of All Features .\n{ // schedule expression. can be a cron expression or a periodic expression \u0026#34;expr\u0026#34;: \u0026#34;* * * * *\u0026#34;, // regularly called on the specified schedule \u0026#34;callback\u0026#34;: { // HTTP callback. optional. \u0026#34;http\u0026#34;: { // HTTP Post request \u0026#34;url\u0026#34;: \u0026#34;http://\u0026lt;host\u0026gt;/\u0026lt;path\u0026gt;\u0026#34;, \u0026#34;header\u0026#34;: { // optional \u0026#34;Content-Type\u0026#34;: \u0026#34;application/x-www-form-urlencoded\u0026#34; }, \u0026#34;body\u0026#34;: \u0026#34;xda=lafayl\u0026amp;cet=hvesud\u0026#34; // optional }, // or TCP callback. optional. \u0026#34;tcp\u0026#34;: { // the TCP address to be connected \u0026#34;addr\u0026#34;: \u0026#34;\u0026lt;host\u0026gt;:\u0026lt;port\u0026gt;\u0026#34;, // the data to be sent. base64 encoded. \u0026#34;body\u0026#34;: \u0026#34;qgBTpMtbXWnzVCXMv50OLA==\u0026#34;, // the data expected to be received. base64 encoded. \u0026#34;ack\u0026#34;: \u0026#34;LI67iYenlxY=\u0026#34; }, // optional \u0026#34;timeout\u0026#34;: \u0026#34;3s\u0026#34;, // number of retries. optional \u0026#34;retryTimes\u0026#34;: 2, // the time to wait between retries. optional \u0026#34;retryInterval\u0026#34;: \u0026#34;3s\u0026#34;, }, // limit how many times a job can be scheduled. optional \u0026#34;times\u0026#34;: 12, // description. optional \u0026#34;memo\u0026#34;: \u0026#34;...\u0026#34; }\rResponse\nOK StatusCode: 200 Body: {\u0026quot;msg\u0026quot;: \u0026quot;OK\u0026quot;} Invalid StatusCode: 400 Body: {\u0026quot;msg\u0026quot;: \u0026quot;\u0026lt;validation error\u0026gt;\u0026quot;} Unprocessable StatusCode: 422 Body: {\u0026quot;msg\u0026quot;: \u0026quot;\u0026lt;error\u0026gt;\u0026quot;} Get a Job Request\nMethod: GET URL: https://\u0026lt;host:port\u0026gt;/jobs/\u0026lt;namespace\u0026gt;/\u0026lt;name\u0026gt; Response\nOK\nStatusCode: 200 Body: { \u0026#34;ns\u0026#34;: \u0026#34;\u0026lt;namespace\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;\u0026lt;name\u0026gt;\u0026#34;, \u0026#34;expr\u0026#34;: \u0026#34;* * * * *\u0026#34;, \u0026#34;callback\u0026#34;: { \u0026#34;http\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;http://\u0026lt;host\u0026gt;/\u0026lt;path\u0026gt;\u0026#34;, \u0026#34;header\u0026#34;: { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/x-www-form-urlencoded\u0026#34; }, \u0026#34;body\u0026#34;: \u0026#34;xda=lafayl\u0026amp;cet=hvesud\u0026#34; }, \u0026#34;timeout\u0026#34;: \u0026#34;3s\u0026#34;, \u0026#34;retryTimes\u0026#34;: 2, \u0026#34;retryInterval\u0026#34;: \u0026#34;3s\u0026#34;, }, \u0026#34;times\u0026#34;: 12, \u0026#34;memo\u0026#34;: \u0026#34;...\u0026#34;, }\rNot Found\nStatusCode: 404 Body: {\u0026quot;msg\u0026quot;:\u0026quot;not found\u0026quot;} Unprocessable\nStatusCode: 422 Body: {\u0026quot;msg\u0026quot;: \u0026quot;\u0026lt;error\u0026gt;\u0026quot;} Delete a Job Request\nMethod: DELETE URL: https://\u0026lt;host:port\u0026gt;/jobs/\u0026lt;namespace\u0026gt;/\u0026lt;name\u0026gt; Response\nOK StatusCode: 200 Body: {\u0026quot;msg\u0026quot;: \u0026quot;OK\u0026quot;} Not Found\nSame as OK. Unprocessable StatusCode: 422 Body: {\u0026quot;msg\u0026quot;: \u0026quot;\u0026lt;error\u0026gt;\u0026quot;} Get Job Execution History Request\nMethod: GET URL: https://\u0026lt;host:port\u0026gt;/jobs/\u0026lt;namespace\u0026gt;/\u0026lt;name\u0026gt;/his Response\nOK\nStatusCode: 200 Body: { \u0026#34;ns\u0026#34;: \u0026#34;\u0026lt;namespace\u0026gt;\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;\u0026lt;name\u0026gt;\u0026#34;, // the number of times the job has been executed \u0026#34;times\u0026#34;: 9, // the latest n (history size) execution records \u0026#34;records\u0026#34;: [ { \u0026#34;startAt\u0026#34;: \u0026#34;2024-01-01T00:00:00Z\u0026#34;, \u0026#34;endAt\u0026#34;: \u0026#34;2024-01-01T00:00:00Z\u0026#34;, \u0026#34;msg\u0026#34;: \u0026#34;...\u0026#34; // error message if any }, // ... ] }\rNot Found\nStatusCode: 404 Body: {\u0026quot;msg\u0026quot;:\u0026quot;not found\u0026quot;} Unprocessable\nStatusCode: 422 Body: {\u0026quot;msg\u0026quot;: \u0026quot;\u0026lt;error\u0026gt;\u0026quot;} Host:Port \u0026lt;dcs-dns-name\u0026gt;:\u0026lt;port\u0026gt;.\n\u0026lt;dcs-dns-name\u0026gt; is the DNS name generated by K8S for DCS,\nand defaults to dcs.\u0026lt;namespace\u0026gt;.svc.cluster.local,\nand can be abbreviated to dcs.\u0026lt;namespace\u0026gt;,\nand can be abbreviated to dcs if the service which sends the request is deployed in the same namespace as DCS.\n\u0026lt;port\u0026gt; defaults to 1058.\nMutual TLS Authentication DCS and client authenticate each other during TLS handshake.\nDefend Against DDoS Attacks DCS limits max number of concurrent requests.\nMeshless Mode Since v1.2.0 , DCS Enterprise can communicate with other services via Meshless .\nYou may choose to run DCS Enterprise in the standard mode or the new Meshless mode.\nIf you call DCS RESTful APIs in the Meshless mode, note the following differences between standard mode and Meshless mode.\nMode Standard Meshless Transport TCP UDS TLS Mutual TLS Authentication N/A Service ID N/A rest.dcs.\u0026lt;namespace\u0026gt; Scheme https http Host:Port \u0026lt;dcs-dns-name\u0026gt;:\u0026lt;port\u0026gt; irrelevant See also Meshless Client User Guide ","date":"2024-06-24","id":16,"permalink":"/dcs/doc/rest/","summary":"\u003ch2 id=\"createupdate-a-job\"\u003eCreate/Update a Job\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003eRequest\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eMethod: \u003ccode\u003ePUT\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eURL: \u003ccode\u003ehttps://\u0026lt;host:port\u0026gt;/jobs/\u0026lt;namespace\u0026gt;/\u0026lt;name\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eHeader: \u003ccode\u003eContent-Type: application/json\u003c/code\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eBody:\u003cbr\u003e\nAs follows are some of the fields. To learn more, view the \u003ca href=\"../features/\"  \u003e\n    Complete List of All Features\n    \n\u003c/a\u003e\n.\u003c/p\u003e","tags":[],"title":"RESTful"},{"content":"v1.1.1 2024-09-07\nCategory Feature Performance 1-RTT Handshake v1.1.0 2024-09-05\nCategory Feature Traffic Management Canary Deployment Strategy v1.0.0 2024-08-09\nCategory Feature Performance 99% Less Resource Consumption than Sidecar Pattern of Service Mesh Performance Completely Eliminate the Network Latency Caused by Sidecar Pattern of Service Mesh Performance Even Eliminate the Network Latency of Direct Communication Performance Real-Time Optimal Routing Traffic Management Real-Time Optimal Routing Traffic Management Access Control Traffic Management Circuit Breaker Traffic Management Idle Timeout Security Secure Tunnels Security Access Control Security Defend Against DDoS Attacks Security Defend Against Slow Attacks Security Close Idle Connections Scalability Horizontal Scaling Reliability Truly Distributed Reliability Load Balanced Reliability Established Connections Remain Intact on Config Changes Reliability Zero Downtime During Scaling Out/In Reliability Zero Downtime During Upgrade Reliability Zero Downtime on Temporary Errors Reliability Zero Downtime on Process Crash Deployment Docker Image and Helm Chart Upgrade Seamlessly Upgrade to a New Version ","date":"2024-08-07","id":17,"permalink":"/meshless/doc/release/","summary":"\u003ch2 id=\"v111\"\u003ev1.1.1\u003c/h2\u003e\n\u003cp\u003e2024-09-07\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eCategory\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eFeature\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ePerformance\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1-RTT Handshake\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"v110\"\u003ev1.1.0\u003c/h2\u003e\n\u003cp\u003e2024-09-05\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eCategory\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eFeature\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eTraffic Management\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCanary Deployment Strategy\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"v100\"\u003ev1.0.0\u003c/h2\u003e\n\u003cp\u003e2024-08-09\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eCategory\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eFeature\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ePerformance\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e99% Less Resource Consumption than Sidecar Pattern of Service Mesh\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ePerformance\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCompletely Eliminate the Network Latency Caused by Sidecar Pattern of Service Mesh\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ePerformance\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eEven Eliminate the Network Latency of Direct Communication\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ePerformance\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eReal-Time Optimal Routing\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eTraffic Management\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eReal-Time Optimal Routing\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eTraffic Management\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eAccess Control\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eTraffic Management\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCircuit Breaker\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eTraffic Management\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eIdle Timeout\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eSecurity\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSecure Tunnels\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eSecurity\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eAccess Control\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eSecurity\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eDefend Against DDoS Attacks\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eSecurity\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eDefend Against Slow Attacks\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eSecurity\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eClose Idle Connections\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eScalability\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eHorizontal Scaling\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eReliability\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eTruly Distributed\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eReliability\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLoad Balanced\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eReliability\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eEstablished Connections Remain Intact on Config Changes\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eReliability\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eZero Downtime During Scaling Out/In\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eReliability\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eZero Downtime During Upgrade\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eReliability\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eZero Downtime on Temporary Errors\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eReliability\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eZero Downtime on Process Crash\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eDeployment\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eDocker Image and Helm Chart\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eUpgrade\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eSeamlessly Upgrade to a New Version\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","tags":[],"title":"Release History"},{"content":"v1.3.0 2024-09-07\nCategory Feature Performance 1-RTT Handshake v1.2.0 2024-07-03\nAdd-On Feature ATC Adaptive and Fair Hierarchical Transmission Control v1.1.0 2024-06-25\nCategory Feature API RESTful v1.0.0 2024-05-28\nCategory Feature API CR Function Cross-Region Transmission Function Multiple Regions Security Secure Tunnels Security Minimize Attack Surface Security Protect Services From Being Exposed to Public Networks Security Reject Connections From Public Networks Security Defend Against DDoS Attacks Security Defend Against Slow Attacks Security Close Idle Connections Scalability Horizontal Scaling Reliability Truly Distributed Reliability Load Balanced Reliability Established Connections Remain Intact on Config Changes Reliability Zero Downtime During Scaling Out/In Reliability Zero Downtime During Upgrade Reliability Zero Downtime on Temporary Errors Reliability Zero Downtime on Process Crash Deployment Docker Image and Helm Chart Upgrade Seamlessly Upgrade to a New Version ","date":"2024-07-03","id":18,"permalink":"/xts/doc/release/","summary":"\u003ch2 id=\"v130\"\u003ev1.3.0\u003c/h2\u003e\n\u003cp\u003e2024-09-07\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eCategory\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eFeature\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003ePerformance\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e1-RTT Handshake\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"v120\"\u003ev1.2.0\u003c/h2\u003e\n\u003cp\u003e2024-07-03\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003eAdd-On\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003eFeature\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003eATC\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eAdaptive and Fair Hierarchical Transmission Control\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"v110\"\u003ev1.1.0\u003c/h2\u003e\n\u003cp\u003e2024-06-25\u003c/p\u003e","tags":[],"title":"Release History"},{"content":"v1.2.0 2024-08-13\nSince v1.2.0, DCS Enterprise can communicate with other services via Meshless .\nYou may choose to run DCS Enterprise in the standard mode or the new Meshless mode.\nIn Meshless mode, DCS Enterprise supports two more types of callbacks: HTTP over UDS, and UDS.\nCategory Feature Pro Enterprise Meshless Mode - ✅ Function HTTP over UDS Callback - ✅ Function HTTP over UDS Callback with Header and/or Body - ✅ Function UDS Callback - ✅ v1.1.0 2024-06-25\nCategory Feature Pro Enterprise API RESTful ✅ ✅ v1.0.0 2024-05-27\nCategory Feature Pro Enterprise API CR ✅ ✅ Function Cron Job ✅ ✅ Function Periodic Job ✅ ✅ Function HTTP Callback ✅ ✅ Function HTTP Callback with Header and/or Body ✅ ✅ Function TCP Callback ✅ ✅ Function Time Zone ✅ ✅ Function Time Zone Change - ✅ Function Job History - ✅ Function Limit Schedule Times - ✅ Scalability Vertical Scaling ✅ ✅ Scalability Horizontal Scaling - ✅ Reliability Architecture Active-Standby Truly Distributed, Load Balanced Reliability Callback with Retry - ✅ Reliability Callback with Timeout - ✅ Reliability Zero Downtime During Scaling Out/In - ✅ Reliability Zero Downtime During Upgrade - ✅ Reliability Zero Downtime on Time Zone Changes - ✅ Reliability Zero Downtime on Temporary Errors - ✅ Reliability Zero Downtime on Process Crash - ✅ Deployment Docker Image and Helm Chart ✅ ✅ Upgrade Seamlessly Upgrade to a New Version ✅ ✅ Upgrade Seamlessly Upgrade from Pro - ✅ ","date":"2024-07-03","id":19,"permalink":"/dcs/doc/release/","summary":"\u003ch2 id=\"v120\"\u003ev1.2.0\u003c/h2\u003e\n\u003cp\u003e2024-08-13\u003c/p\u003e\n\u003cp\u003eSince v1.2.0, DCS Enterprise can communicate with other services via \u003ca href=\"/meshless/doc/intro/\"  \u003e\n    Meshless\n    \n\u003c/a\u003e\n.\u003cbr\u003e\nYou may choose to run DCS Enterprise in the standard mode or the new Meshless mode.\u003c/p\u003e","tags":[],"title":"Release History"},{"content":"Prerequisite Cert Manager Meshless depends on cert-manager ↗ to issue certificates.\nYou\u0026rsquo;ve probably been using cert-manager. If so, you can skip this section.\ncert-manager is a powerful and extensible X.509 certificate controller for Kubernetes and OpenShift workloads. It will obtain certificates from a variety of Issuers, both popular public Issuers as well as private Issuers, and ensure the certificates are valid and up-to-date, and will attempt to renew certificates at a configured time before expiry.\nInstall cert-manager ↗ Config Issuer ↗ Trust Manager Meshless depends on trust-manager ↗ for trusted CAs for validating certificates during TLS handshakes.\nYou\u0026rsquo;ve probably been using trust-manager. If so, you can skip this section.\ntrust-manager is designed to complement cert-manager and works well when consuming CA certificates from a cert-manager Issuer or ClusterIssuer.\nInstall trust-manager ↗ Config Bundle ↗ Installation/Upgrade Download a Release In every release, there\u0026rsquo;re several docker images and one helm chart.\ne.g.\nMeshless v1.0.0: meshless-1.0.0-amd64.tar # docker image of arch amd64 meshless-1.0.0-arm64.tar # docker image of arch arm64 meshless-1.0.0.tgz # helm chart\rUpload Docker Image Choose a docker images which matches your arch, and upload the docker image to your image registry server.\nIf none image matches your arch, please contact us, we\u0026rsquo;ll build a docker image for that arch and add it to the release.\nInstall for the First Time helm install meshless \u0026lt;path-to-helm-chart\u0026gt; --set namespace=\u0026lt;namespace\u0026gt;,image=\u0026lt;path-to-docker-image\u0026gt;,cert.issuer.name=\u0026lt;issuer\u0026gt;,cert.issuer.kind=\u0026lt;issuer-kind\u0026gt;,trustedCAs.name=\u0026lt;trusted-cas-name\u0026gt;,trustedCAs.key=\u0026lt;trusted-cas-key\u0026gt;,licenseSubject=\u0026lt;license-subject\u0026gt; --set-file license=\u0026lt;path-to-license\u0026gt;\re.g.\nhelm install meshless meshless-1.0.0.tgz --set namespace=default,image=registry-address/meshless:1.0.0-amd64,cert.issuer.name=issuer,cert.issuer.kind=ClusterIssuer,trustedCAs.name=trusted-cas,trustedCAs.key=cas,licenseSubject=your-company --set-file license=your-company.meshless.license\rUpgrade Meshless is backward compatible, so you can seamlessly upgrade to a new version.\n# mostly the same as installation, except the subcommand install is replaced with upgrade helm upgrade meshless \u0026lt;path-to-helm-chart\u0026gt; ...\re.g.\nhelm upgrade meshless meshless-1.1.0.tgz ...\rBecause helm upgrade doesn\u0026rsquo;t update CRDs, please execute the following to update CRDs.\ntar -zxvf \u0026lt;path-to-helm-chart\u0026gt; -C /tmp meshless/crds kubectl apply -f /tmp/meshless/crds rm -rf /tmp/meshless\rComplete List of Options As follows is the complete list of options of installation and upgrade.\nRequired Option Default Value Meaning namespace default The namespace where to install/upgrade Meshless ✓ image Path to docker image of Meshless tz UTC Local time zone in containers of Meshless lease 15s Lease duration, used in leader election agentPortHost 1058 Host port of Meshless Node Agent maxConn Max number of concurrent connections to Meshless Node Agent. Default to no limit. idleTimeout 1m Idle timeout. If no data is sent from a connection in the specified duration, close the connection. handshakeTimeout 10s Handshake timeout. If handshake does not finish in the specified duration, close the connection. dialTimeout 3s Connection timeout. See also Go DialTimeout ↗ . tlsHandshakeTimeout 10s TLS handshake timeout. If TLS handshake does not finish in the specified duration, close the connection. udsBaseDirHost /var/tmp/meshless Meshless UDS base directory on Host cert.duration Duration (i.e. lifetime) of Certificate. Default to 90 days as per cert-manager doc. cert.renewBefore How long before expiry a certificate should be renewed. Default to 1⁄3 of cert.duration as per cert-manager doc. ✓ cert.issuer.kind Kind of cert-manager issuer. Valid values are ClusterIssuer, Issuer. ✓ cert.issuer.name Name of cert-manager issuer. trustedCAs.kind ConfigMap Kind of trust-manager Bundle target. Valid values are ConfigMap, Secret. ✓ trustedCAs.name Name of trust-manager Bundle target ✓ trustedCAs.key Key of trust-manager Bundle target resource.mem.request Memory request of a container of Meshless Node Agent resource.mem.limit Memory limit of a container of Meshless Node Agent resource.cpu.request CPU request of a container of Meshless Node Agent resource.cpu.limit CPU limit of a container of Meshless Node Agent resourceMgt.mem.request Memory request of a container of Meshless Mgt resourceMgt.mem.limit Memory limit of a container of Meshless Mgt resourceMgt.cpu.request CPU request of a container of Meshless Mgt resourceMgt.cpu.limit CPU limit of a container of Meshless Mgt ✓ licenseSubject License subject, usually the name of your company ✓ license Path to license. License subject and license file will be sent to you once you purchase a commercial license. log.fileSize 10 Max size in MB of a log file. If a file exceeds this size, the file will be rotated. log.baks 2 Max number of old log files. Older files will be removed. For all duration options, the format is defined by Go time.ParseDuration ↗ . For all cert-manager options (i.e. cert.*), see also cert-manager API doc ↗ . For all trust-manager options (i.e. trustedCAs.*), see also trust-manager doc ↗ . Log Aggregation You’ve probably been using a log aggregation system for gathering, querying and displaying logs.\nIf not, try Loki ↗ .\n","date":"2024-08-07","id":20,"permalink":"/meshless/doc/install/","summary":"\u003ch2 id=\"prerequisite\"\u003ePrerequisite\u003c/h2\u003e\n\u003ch3 id=\"cert-manager\"\u003eCert Manager\u003c/h3\u003e\n\u003cp\u003eMeshless depends on \u003ca href=\"https://cert-manager.io/\"   target=\"_blank\" \u003e\n    cert-manager\n     ↗ \n\u003c/a\u003e\n to issue certificates.\u003c/p\u003e\n\u003cp\u003eYou\u0026rsquo;ve probably been using cert-manager. If so, you can skip this section.\u003c/p\u003e","tags":[],"title":"Installation"},{"content":"Prerequisite Cert Manager DCS RESTful server depends on cert-manager ↗ to issue certificates.\nYou\u0026rsquo;ve probably been using cert-manager. If so, you can skip this section.\ncert-manager is a powerful and extensible X.509 certificate controller for Kubernetes and OpenShift workloads. It will obtain certificates from a variety of Issuers, both popular public Issuers as well as private Issuers, and ensure the certificates are valid and up-to-date, and will attempt to renew certificates at a configured time before expiry.\nInstall cert-manager ↗ Config Issuer ↗ Trust Manager DCS RESTful server depends on trust-manager ↗ for trusted CAs for validating certificates during TLS handshakes.\nYou\u0026rsquo;ve probably been using trust-manager. If so, you can skip this section.\ntrust-manager is designed to complement cert-manager and works well when consuming CA certificates from a cert-manager Issuer or ClusterIssuer.\nInstall trust-manager ↗ Config Bundle ↗ Installation/Upgrade Download a Release In every release, there\u0026rsquo;re several docker images and one helm chart.\ne.g.\nDCS Pro v1.0.0: dcs-pro-1.0.0-amd64.tar # docker image of arch amd64 dcs-pro-1.0.0-arm64.tar # docker image of arch arm64 dcs-pro-1.0.0.tgz # helm chart\rUpload Docker Image Choose a docker images which matches your arch, and upload the docker image to your image registry server.\nIf none image matches your arch, please contact us, We\u0026rsquo;ll build a docker image for that arch and add it to the release.\nInstall for the First Time helm install dcs \u0026lt;path-to-helm-chart\u0026gt; --set namespace=\u0026lt;namespace\u0026gt;,image=\u0026lt;path-to-docker-image\u0026gt;,tz=\u0026lt;time-zone\u0026gt;,cert.issuer.name=\u0026lt;issuer\u0026gt;,cert.issuer.kind=\u0026lt;issuer-kind\u0026gt;,trustedCAs.name=\u0026lt;trusted-cas-name\u0026gt;,trustedCAs.key=\u0026lt;trusted-cas-key\u0026gt;,licenseSubject=\u0026lt;license-subject\u0026gt; --set-file license=\u0026lt;path-to-license\u0026gt;\re.g.\nhelm install dcs dcs-pro-1.0.0.tgz --set namespace=default,image=registry-address/dcs-pro:1.0.0-amd64,tz=America/New_York,cert.issuer.name=issuer,cert.issuer.kind=ClusterIssuer,trustedCAs.name=trusted-cas,trustedCAs.key=cas,licenseSubject=your-company --set-file license=your-company.dcs-pro.license\rUpgrade to a New Version DCS is backward compatible, so you can seamlessly upgrade to a New Version.\n# mostly the same as installation, except the subcommand install is replaced with upgrade helm upgrade dcs \u0026lt;path-to-helm-chart\u0026gt; ...\re.g.\nhelm upgrade dcs dcs-pro-1.1.0.tgz ...\rBecause helm upgrade doesn\u0026rsquo;t update CRDs, please execute the following to update CRDs.\ntar -zxvf \u0026lt;path-to-helm-chart\u0026gt; -C /tmp dcs-pro/crds kubectl apply -f /tmp/dcs-pro/crds rm -rf /tmp/dcs-pro\rComplete List of Options As follows is the complete list of options of installation and upgrade.\nRequired Option Default Value Meaning namespace default The namespace where to install/upgrade DCS ✓ image Path to docker image of DCS tz UTC Local time zone in containers of DCS lease 15s Lease duration, used in leader election restPort 1058 RESTful server port maxConReq Max number of concurrent requests to the RESTful server. Default to no limit. cert.duration Duration (i.e. lifetime) of Certificate. Default to 90 days as per cert-manager doc. cert.renewBefore How long before expiry a certificate should be renewed. Default to 1⁄3 of cert.duration as per cert-manager doc. ✓ cert.issuer.kind Kind of cert-manager issuer. Valid values are ClusterIssuer, Issuer. ✓ cert.issuer.name Name of cert-manager issuer. trustedCAs.kind ConfigMap Kind of trust-manager Bundle target. Valid values are ConfigMap, Secret. ✓ trustedCAs.name Name of trust-manager Bundle target ✓ trustedCAs.key Key of trust-manager Bundle target resource.mem.request Memory request of a container of DCS resource.mem.limit Memory limit of a container of DCS resource.cpu.request CPU request of a container of DCS resource.cpu.limit CPU limit of a container of DCS ✓ licenseSubject License subject, usually the name of your company ✓ license Path to license. License subject and license file will be sent to you once you purchase a commercial license. log.fileSize 10 Max size in MB of a log file. If a file exceeds this size, the file will be rotated. log.baks 2 Max number of old log files. Older files will be removed. For all duration options, the format is defined by Go time.ParseDuration ↗ . For all cert-manager options (i.e. cert.*), see also cert-manager API doc ↗ . For all trust-manager options (i.e. trustedCAs.*), see also trust-manager doc ↗ . Log Aggregation You’ve probably been using a log aggregation system for gathering, querying and displaying logs.\nIf not, try Loki ↗ .\n","date":"2024-07-10","id":21,"permalink":"/dcs/doc/pro_install/","summary":"\u003ch2 id=\"prerequisite\"\u003ePrerequisite\u003c/h2\u003e\n\u003ch3 id=\"cert-manager\"\u003eCert Manager\u003c/h3\u003e\n\u003cp\u003eDCS RESTful server depends on \u003ca href=\"https://cert-manager.io/\"   target=\"_blank\" \u003e\n    cert-manager\n     ↗ \n\u003c/a\u003e\n to issue certificates.\u003c/p\u003e\n\u003cp\u003eYou\u0026rsquo;ve probably been using cert-manager. If so, you can skip this section.\u003c/p\u003e","tags":[],"title":"Pro Installation"},{"content":"Prerequisite Cert Manager XTS depends on cert-manager ↗ to issue certificates.\nYou\u0026rsquo;ve probably been using cert-manager. If so, you can skip this section.\ncert-manager is a powerful and extensible X.509 certificate controller for Kubernetes and OpenShift workloads. It will obtain certificates from a variety of Issuers, both popular public Issuers as well as private Issuers, and ensure the certificates are valid and up-to-date, and will attempt to renew certificates at a configured time before expiry.\nInstall cert-manager ↗ Config Issuer ↗ Trust Manager XTS depends on trust-manager ↗ for trusted CAs for validating certificates during TLS handshakes inside-cluster and cross-region as well.\nYou\u0026rsquo;ve probably been using trust-manager. If so, you can skip this section.\ntrust-manager is designed to complement cert-manager and works well when consuming CA certificates from a cert-manager Issuer or ClusterIssuer.\nInstall trust-manager ↗ Config Bundle ↗ External Load Balancer Provider XTS depends on External Load Balancer Provider ↗ to allocate an external IP address.\nYou\u0026rsquo;ve probably already installed an external load balancer provider,\nif you\u0026rsquo;re using a cloud provider like GCP, AWS, Azure\u0026hellip; or if you\u0026rsquo;re using something like MetalLB ↗ in your private cloud. Installation/Upgrade Download a Release In every release, there\u0026rsquo;re several docker images and one helm chart.\ne.g.\nXTS v1.0.0: xts-1.0.0-amd64.tar # docker image of arch amd64 xts-1.0.0-arm64.tar # docker image of arch arm64 xts-1.0.0.tgz # helm chart\rUpload Docker Image Choose a docker images which matches your arch, and upload the docker image to your image registry server.\nIf none image matches your arch, please contact us, we\u0026rsquo;ll build a docker image for that arch and add it to the release.\nInstall for the First Time helm install xts \u0026lt;path-to-helm-chart\u0026gt; --set namespace=\u0026lt;namespace\u0026gt;,image=\u0026lt;path-to-docker-image\u0026gt;,cert.issuer.name=\u0026lt;issuer\u0026gt;,cert.issuer.kind=\u0026lt;issuer-kind\u0026gt;,trustedCAs.name=\u0026lt;trusted-cas-name\u0026gt;,trustedCAs.key=\u0026lt;trusted-cas-key\u0026gt;,licenseSubject=\u0026lt;license-subject\u0026gt; --set-file license=\u0026lt;path-to-license\u0026gt;\re.g.\nhelm install xts xts-1.0.0.tgz --set namespace=default,image=registry-address/xts:1.0.0-amd64,cert.issuer.name=issuer,cert.issuer.kind=ClusterIssuer,trustedCAs.name=trusted-cas,trustedCAs.key=cas,licenseSubject=your-company --set-file license=your-company.xts.license\rUpgrade XTS is backward compatible, so you can seamlessly upgrade to a new version.\n# mostly the same as installation, except the subcommand install is replaced with upgrade helm upgrade xts \u0026lt;path-to-helm-chart\u0026gt; ...\re.g.\nhelm upgrade xts xts-1.1.0.tgz ...\rBecause helm upgrade doesn\u0026rsquo;t update CRDs, please execute the following to update CRDs.\ntar -zxvf \u0026lt;path-to-helm-chart\u0026gt; -C /tmp xts/crds kubectl apply -f /tmp/xts/crds rm -rf /tmp/xts\rComplete List of Options As follows is the complete list of options of installation and upgrade.\nRequired Option Default Value Meaning namespace default The namespace where to install/upgrade XTS ✓ image Path to docker image of XTS replicas 2 Number of replicas of XTS tz UTC Local time zone in containers of XTS lease 15s Lease duration, used in leader election externalSrvPort 1058 XTS external server port restPort 1060 RESTful server port maxConn Max number of concurrent connections. Default to no limit. idleTimeout 1m Idle timeout. If no data is sent from a connection in the specified duration, close the connection. handshakeTimeout 10s Handshake timeout. If handshake does not finish in the specified duration, close the connection. dialTimeout 3s Connection timeout. See also Go DialTimeout ↗ . tlsHandshakeTimeout 10s TLS handshake timeout. If TLS handshake does not finish in the specified duration, close the connection. maxConReq Max number of concurrent requests to the RESTful server. Default to no limit. enableTc false Whether to enable ATC or not cert.duration Duration (i.e. lifetime) of Certificate. Default to 90 days as per cert-manager doc. cert.renewBefore How long before expiry a certificate should be renewed. Default to 1⁄3 of cert.duration as per cert-manager doc. ✓ cert.issuer.kind Kind of cert-manager issuer. Valid values are ClusterIssuer, Issuer. ✓ cert.issuer.name Name of cert-manager issuer. trustedCAs.kind ConfigMap Kind of trust-manager Bundle target. Valid values are ConfigMap, Secret. ✓ trustedCAs.name Name of trust-manager Bundle target ✓ trustedCAs.key Key of trust-manager Bundle target resource.mem.request Memory request of a container of XTS resource.mem.limit Memory limit of a container of XTS resource.cpu.request CPU request of a container of XTS resource.cpu.limit CPU limit of a container of XTS ✓ licenseSubject License subject, usually the name of your company ✓ license Path to license. License subject and license file will be sent to you once you purchase a commercial license. licenseAddon Path to license of addon. License subject and license file will be sent to you once you purchase a commercial license. log.fileSize 10 Max size in MB of a log file. If a file exceeds this size, the file will be rotated. log.baks 2 Max number of old log files. Older files will be removed. For all duration options, the format is defined by Go time.ParseDuration ↗ . For all cert-manager options (i.e. cert.*), see also cert-manager API doc ↗ . For all trust-manager options (i.e. trustedCAs.*), see also trust-manager doc ↗ . Log Aggregation You’ve probably been using a log aggregation system for gathering, querying and displaying logs.\nIf not, try Loki ↗ .\n","date":"2024-07-10","id":22,"permalink":"/xts/doc/install/","summary":"\u003ch2 id=\"prerequisite\"\u003ePrerequisite\u003c/h2\u003e\n\u003ch3 id=\"cert-manager\"\u003eCert Manager\u003c/h3\u003e\n\u003cp\u003eXTS depends on \u003ca href=\"https://cert-manager.io/\"   target=\"_blank\" \u003e\n    cert-manager\n     ↗ \n\u003c/a\u003e\n to issue certificates.\u003c/p\u003e\n\u003cp\u003eYou\u0026rsquo;ve probably been using cert-manager. If so, you can skip this section.\u003c/p\u003e","tags":[],"title":"Installation"},{"content":"Since v1.2.0 , DCS Enterprise can communicate with other services via Meshless .\nYou may choose to run DCS Enterprise in the standard mode or the new Meshless mode.\nInstallation Guide for Meshless Mode Installation Guide for Standard Mode Meshless Mode Prerequisite In Meshless mode, DCS Enterprise depends on Meshless to communicate with other services.\nYou\u0026rsquo;ve probably been using Meshless. If so, you can skip this section.\nInstall Meshless Installation/Upgrade Download a Release In every release, there\u0026rsquo;re several docker images and one helm chart.\ne.g.\nDCS Enterprise v1.2.0: dcs-ent-1.2.0-amd64.tar # docker image of arch amd64 dcs-ent-1.2.0-arm64.tar # docker image of arch arm64 dcs-ent-1.2.0.tgz # helm chart\rUpload Docker Image Choose a docker images which matches your arch, and upload the docker image to your image registry server.\nIf none image matches your arch, please contact us, We\u0026rsquo;ll build a docker image for that arch and add it to the release.\nInstall for the First Time helm install dcs \u0026lt;path-to-helm-chart\u0026gt; --set meshless=true,namespace=\u0026lt;namespace\u0026gt;,image=\u0026lt;path-to-docker-image\u0026gt;,tz=\u0026lt;time-zone\u0026gt;,licenseSubject=\u0026lt;license-subject\u0026gt; --set-file license=\u0026lt;path-to-license\u0026gt;\re.g.\nhelm install dcs dcs-ent-1.2.0.tgz --set meshless=true,namespace=default,image=registry-address/dcs-ent:1.2.0-amd64,tz=America/New_York,licenseSubject=your-company --set-file license=your-company.dcs-ent.license\rUpgrade to a New Version, or Upgrade From Pro DCS Enterprise is backward compatible, and also backward compatible with DCS Pro.\nSo you can seamlessly upgrade to a New Version, or upgrade from Pro.\n# mostly the same as installation, except the subcommand install is replaced with upgrade helm upgrade dcs \u0026lt;path-to-helm-chart\u0026gt; ...\re.g.\nhelm upgrade dcs dcs-ent-1.1.2.tgz ...\rBecause helm upgrade doesn\u0026rsquo;t update CRDs, please execute the following to update CRDs.\ntar -zxvf \u0026lt;path-to-helm-chart\u0026gt; -C /tmp dcs-ent/crds kubectl apply -f /tmp/dcs-ent/crds rm -rf /tmp/dcs-ent\rComplete List of Options As follows is the complete list of options of installation and upgrade.\nRequired Option Default Value Meaning ✓ meshless Set to true to enable Meshless mode namespace default The namespace where to install/upgrade DCS ✓ image Path to docker image of DCS replicas 2 Number of replicas of DCS tz UTC Local time zone in containers of DCS histSize 3 History size. Only the latest n (history size) execution records of every job are kept. maxConReq Max number of concurrent requests to the RESTful server. Default to no limit. resource.mem.request Memory request of a container of DCS resource.mem.limit Memory limit of a container of DCS resource.cpu.request CPU request of a container of DCS resource.cpu.limit CPU limit of a container of DCS ✓ licenseSubject License subject, usually the name of your company ✓ license Path to license. License subject and license file will be sent to you once you purchase a commercial license. log.fileSize 10 Max size in MB of a log file. If a file exceeds this size, the file will be rotated. log.baks 2 Max number of old log files. Older files will be removed. Log Aggregation You’ve probably been using a log aggregation system for gathering, querying and displaying logs.\nIf not, try Loki ↗ .\nStandard Mode Prerequisite Cert Manager DCS RESTful server depends on cert-manager ↗ to issue certificates.\nYou\u0026rsquo;ve probably been using cert-manager. If so, you can skip this section.\ncert-manager is a powerful and extensible X.509 certificate controller for Kubernetes and OpenShift workloads. It will obtain certificates from a variety of Issuers, both popular public Issuers as well as private Issuers, and ensure the certificates are valid and up-to-date, and will attempt to renew certificates at a configured time before expiry.\nInstall cert-manager ↗ Config Issuer ↗ Trust Manager DCS RESTful server depends on trust-manager ↗ for trusted CAs for validating certificates during TLS handshakes.\nYou\u0026rsquo;ve probably been using trust-manager. If so, you can skip this section.\ntrust-manager is designed to complement cert-manager and works well when consuming CA certificates from a cert-manager Issuer or ClusterIssuer.\nInstall trust-manager ↗ Config Bundle ↗ Installation/Upgrade Download a Release In every release, there\u0026rsquo;re several docker images and one helm chart.\ne.g.\nDCS Enterprise v1.0.0: dcs-ent-1.0.0-amd64.tar # docker image of arch amd64 dcs-ent-1.0.0-arm64.tar # docker image of arch arm64 dcs-ent-1.0.0.tgz # helm chart\rUpload Docker Image Choose a docker images which matches your arch, and upload the docker image to your image registry server.\nIf none image matches your arch, please contact us, We\u0026rsquo;ll build a docker image for that arch and add it to the release.\nInstall for the First Time helm install dcs \u0026lt;path-to-helm-chart\u0026gt; --set namespace=\u0026lt;namespace\u0026gt;,image=\u0026lt;path-to-docker-image\u0026gt;,tz=\u0026lt;time-zone\u0026gt;,cert.issuer.name=\u0026lt;issuer\u0026gt;,cert.issuer.kind=\u0026lt;issuer-kind\u0026gt;,trustedCAs.name=\u0026lt;trusted-cas-name\u0026gt;,trustedCAs.key=\u0026lt;trusted-cas-key\u0026gt;,licenseSubject=\u0026lt;license-subject\u0026gt; --set-file license=\u0026lt;path-to-license\u0026gt;\re.g.\nhelm install dcs dcs-ent-1.0.0.tgz --set namespace=default,image=registry-address/dcs-ent:1.0.0-amd64,tz=America/New_York,cert.issuer.name=issuer,cert.issuer.kind=ClusterIssuer,trustedCAs.name=trusted-cas,trustedCAs.key=cas,licenseSubject=your-company --set-file license=your-company.dcs-ent.license\rUpgrade to a New Version, or Upgrade From Pro DCS Enterprise is backward compatible, and also backward compatible with DCS Pro.\nSo you can seamlessly upgrade to a New Version, or upgrade from Pro.\n# mostly the same as installation, except the subcommand install is replaced with upgrade helm upgrade dcs \u0026lt;path-to-helm-chart\u0026gt; ...\re.g.\nhelm upgrade dcs dcs-ent-1.1.0.tgz ...\rBecause helm upgrade doesn\u0026rsquo;t update CRDs, please execute the following to update CRDs.\ntar -zxvf \u0026lt;path-to-helm-chart\u0026gt; -C /tmp dcs-ent/crds kubectl apply -f /tmp/dcs-ent/crds rm -rf /tmp/dcs-ent\rComplete List of Options As follows is the complete list of options of installation and upgrade.\nRequired Option Default Value Meaning namespace default The namespace where to install/upgrade DCS ✓ image Path to docker image of DCS replicas 2 Number of replicas of DCS tz UTC Local time zone in containers of DCS histSize 3 History size. Only the latest n (history size) execution records of every job are kept. restPort 1058 RESTful server port maxConReq Max number of concurrent requests to the RESTful server. Default to no limit. cert.duration Duration (i.e. lifetime) of Certificate. Default to 90 days as per cert-manager doc. cert.renewBefore How long before expiry a certificate should be renewed. Default to 1⁄3 of cert.duration as per cert-manager doc. ✓ cert.issuer.kind Kind of cert-manager issuer. Valid values are ClusterIssuer, Issuer. ✓ cert.issuer.name Name of cert-manager issuer. trustedCAs.kind ConfigMap Kind of trust-manager Bundle target. Valid values are ConfigMap, Secret. ✓ trustedCAs.name Name of trust-manager Bundle target ✓ trustedCAs.key Key of trust-manager Bundle target resource.mem.request Memory request of a container of DCS resource.mem.limit Memory limit of a container of DCS resource.cpu.request CPU request of a container of DCS resource.cpu.limit CPU limit of a container of DCS ✓ licenseSubject License subject, usually the name of your company ✓ license Path to license. License subject and license file will be sent to you once you purchase a commercial license. log.fileSize 10 Max size in MB of a log file. If a file exceeds this size, the file will be rotated. log.baks 2 Max number of old log files. Older files will be removed. For all duration options, the format is defined by Go time.ParseDuration ↗ . For all cert-manager options (i.e. cert.*), see also cert-manager API doc ↗ . For all trust-manager options (i.e. trustedCAs.*), see also trust-manager doc ↗ . Log Aggregation You’ve probably been using a log aggregation system for gathering, querying and displaying logs.\nIf not, try Loki ↗ .\n","date":"2024-07-10","id":23,"permalink":"/dcs/doc/ent_install/","summary":"\u003cp\u003eSince \u003ca href=\"../release/#v120\"  \u003e\n    v1.2.0\n    \n\u003c/a\u003e\n, DCS Enterprise can communicate with other services via \u003ca href=\"/meshless/doc/intro/\"  \u003e\n    Meshless\n    \n\u003c/a\u003e\n.\u003cbr\u003e\nYou may choose to run DCS Enterprise in the standard mode or the new Meshless mode.\u003c/p\u003e","tags":[],"title":"Enterprise Installation"},{"content":"Auto-scalable Ring Buffer, Double Ended Queue Ringbuf is auto-scalable ring buffer. Ringbuf also implements deque (Double Ended Queue).\nIt\u0026rsquo;s better to implement deque based on ringbuf instead of slice or list.\nIn contrast to slice, ringbuf can reuse memory block of removed elements, and therefore less memory allocation and less GC.\nAnother disadvantage of slice is that memory block can not be recycled in time. Even though a part of a slice\u0026rsquo;s underlying array won\u0026rsquo;t be reused, that part can not be recycled instantly, because the underlying array is referenced by the slice as a whole. In contrast to list, ringbuf has continuous memory space, no front and back pointers, and therefore higher access speed and less memory footprint. Import\nimport \u0026#34;github.com/burningxflame/gx/ds/ringbuf\u0026#34;\rAPI:\nPushBack, PushFront, PeekBack, PeekFront, PopBack, PopFront, Len, Range\nSample:\nringbuf ↗ Queue Queue is FIFO, a subset of deque.\nImport\nimport \u0026#34;github.com/burningxflame/gx/ds/queue\u0026#34;\rAPI:\nEnq, Peek, Deq, Len, Range\nSample:\nqueue ↗ Stack Stack is LIFO, another subset of deque.\nImport\nimport \u0026#34;github.com/burningxflame/gx/ds/stack\u0026#34;\rAPI:\nPush, Peek, Pop, Len, Range\nSample:\nstack ↗ Heap Import\nimport \u0026#34;github.com/burningxflame/gx/ds/heap\u0026#34;\rAPI:\nPush, Pop, Len, Range\nSample:\nheap ↗ Set Import\nimport \u0026#34;github.com/burningxflame/gx/ds/set\u0026#34;\rAPI:\nAdd, Delete, Len, Contain, Equal, Range, Union, Intersect, Diff\nSample:\nset ↗ Sorted Slice Import\nimport \u0026#34;github.com/burningxflame/gx/ds/sslice\u0026#34;\rAPI:\nInsert, Search, SearchFunc, Slice, Delete\nSample:\nsslice ↗ Benchmark goos: darwin goarch: amd64 cpu: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\rNote: In each of the following benchmark results, the second colume (N) represents collection size, i.e., the number of elements in a collection.\nRing Buffer, Double Ended Queue:\nBenchmarkPushBack-12 92285098 17.93 ns/op 47 B/op 0 allocs/op BenchmarkPushFront-12 95364520 14.98 ns/op 46 B/op 0 allocs/op BenchmarkPopFront-12 385959025 3.214 ns/op 0 B/op 0 allocs/op BenchmarkPopBack-12 359027050 3.602 ns/op 0 B/op 0 allocs/op\rQueue:\nBenchmarkEnq-12 58082024\t17.98 ns/op\t49 B/op\t0 allocs/op BenchmarkDeq-12 616338339\t4.427 ns/op\t0 B/op\t0 allocs/op\rStack:\nBenchmarkPush-12 86427447\t16.37 ns/op\t41 B/op\t0 allocs/op BenchmarkPop-12 585195102\t3.419 ns/op\t0 B/op\t0 allocs/op\rHeap:\nBenchmarkPush-12 35654341\t41.86 ns/op\t50 B/op\t0 allocs/op BenchmarkPop-12 5362929\t234.2 ns/op\t7 B/op\t0 allocs/op\rSet:\nBenchmarkAdd-12 7962375\t203.7 ns/op\t48 B/op\t0 allocs/op BenchmarkDelete-12 16687696\t90.03 ns/op\t0 B/op\t0 allocs/op\r","date":"2024-05-07","id":24,"permalink":"/gx/doc/features/ds/","summary":"\u003ch2 id=\"auto-scalable-ring-buffer-double-ended-queue\"\u003eAuto-scalable Ring Buffer, Double Ended Queue\u003c/h2\u003e\n\u003cp\u003eRingbuf is auto-scalable ring buffer. Ringbuf also implements deque (Double Ended Queue).\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s better to implement deque based on ringbuf instead of slice or list.\u003c/p\u003e","tags":[],"title":"Generic Data Structures"},{"content":"In contrast to eager evaluation where evaluation is performed immediately, an Iterator is lazily evaluated, i.e. not evaluated until it\u0026rsquo;s necessary, e.g. when you drain an Iterator.\nImport\nimport \u0026#34;github.com/burningxflame/gx/ds/iter\u0026#34;\rFrom Other Types to Iterators Create Iterators from Builtin Types\n// Create an Iterator from a slice it := iter.FromSlice(l) // Create an Iterator from a map it := iter.FromMap(m) // Create an Iterator from a channel it := iter.FromChan(c)\rCreate Iterators from Iters\nIter is an interface representing a lazy iteration.\n// Represent a lazy iteration type Iter[E any] interface { // Advance the iteration and return an Option wrapping the next value if exist. Next() Option[E] } // Represent an optional value type Option[E any] struct { Val E // the value if exist Ok bool // true if exist, false otherwise }\r// Create an Iterator consisting of all the elements of the first Iter, followed by all the elements of the second Iter, and so on. it := iter.From(i1, i2, ...)\rCreate Iterators from Rangers\nRanger is an interface representing a normal iteration (not lazy).\n// Represent a normal iteration (not lazy) type Ranger[E any] interface { // Iterate the collection and call fn for each element. ForEach(fn func(E)) }\r// Create an Iterator from a Ranger it := iter.FromRanger(r)\rSamples\nfrom_to ↗ Iterator Transformations A transformation method transforms an Iterator in place, and returns the Iterator itself. This approach reduces memory footprint, especially for long pipelines of Iterators. And it enables method chaining as well, for easily building pipelines of Iterators.\n// Returns an Iterator consisting of those elements of the Iterator for which fn(e) returns true. it2 := it.Filter(pred) // Return an Iterator consisting of the results of applying fn to every element of the Iterator. it2 := it.Map(fn)\rGo doesn\u0026rsquo;t allow to define type parameters in methods ↗ . So, to transform an Iterator of type E into an Iterator of another type F, use the function (not method) Map instead.\nfunc (it *Iterator[E]) Map(fn MapFn[E, E]) *Iterator[E] vs func Map[E, F any](it *Iterator[E], fn MapFn[E, F]) *Iterator[F] // Map to another type it2 := iter.Map(it, fn)\r// Return an Iterator consisting of the first n elements of the Iterator, or all elements if there are fewer than n. it2 := it.Take(n) // Returns an Iterator consisting of all but the first n elements of the Iterator. it2 := it.Drop(n) // Return an Iterator consisting of those elements of the Iterator as long as fn(e) returns true. Once fn(e) returns false, the rest of the elements are ignored. it2 := it.TakeWhile(pred) // Return an Iterator consisting of those elements of the Iterator starting from the first element for which fn(e) returns false. it2 := it.DropWhile(pred) // Return an Iterator consisting of all the elements of the first Iterator, followed by all the elements of the second Iterator, and so on. it := iter.Chain(it1, it2, ...)\rSamples\ntransform ↗ Pipelines of Iterators It\u0026rsquo;s easy to use method chaining to build pipelines of Iterators.\nit2 := it.Drop(n).Filter(pred).Map(fn).Take(m)...\rPipelines of Iterators are lazily evaluated, i.e. not evaluated until it\u0026rsquo;s necessary, e.g. when you drain pipelines. This approach reduces memory footprint, especially for long pipelines of Iterators.\nSamples\npipeline ↗ Drain Iterators Draining an Iterator means completing iteration and producing a result or a side effect. This is the time when an Iterator is really evaluated. After draining, an Iterator is considered exhausted and it\u0026rsquo;s pointless to use that Iterator again.\n// Call fn for each element of the Iterator. it.ForEach(fn) // Return the min element of the Iterator. o := it.Min() // Return the max element of the Iterator. o := it.Max() // Return a sorted slice of all element of the Iterator. l := it.Sort(less) // Return the result of applying fn to ini and the first element of the Iterator, // then applying fn to that result and the second element, and so on. // If the Iterator is empty, return ini and fn is not called. acc := it.Reduce(ini, fn)\rGo doesn\u0026rsquo;t allow to define type parameters in methods ↗ . So, to reduce an Iterator of type E into a result of another type F, use the function (not method) Reduce instead.\nfunc (it *Iterator[E]) Reduce(ini E, fn func(acc E, e E) E) E vs func Reduce[A any, E any](it *Iterator[E], ini A, fn func(acc A, e E) A) A // Reduce to another type acc := iter.Reduce(it, ini, fn)\r// Call fn sequentially for each element of the Iterator. If fn returns false, stop iteration. it.Range(fn) // Return true if fn(e) is true for any element of the Iterator. // If the Iterator is empty, return false. ok := it.Any(pred) // Return true if fn(e) is true for every element of the Iterator. // If the Iterator is empty, return true. ok := it.Every(pred)\rSamples\ndrain ↗ From Iterators to Other Types Convert Iterators to Builtin Types\n// Return a slice of all elements of the Iterator. l := it.ToSlice() // Return a map of all elements of the Iterator. m := iter.ToMap(it) // Return a channel of all elements of the Iterator. ch := it.ToChan()\rConvert Iterators to Collectors\nCollector is an interface representing a collector which collects all elements of an Iterator.\n// Represent a collector which collects all elements of an Iterator. type Collector[E any] interface { // Add the element into the Collector Add(E) }\r// Feed the Collector c with all elements of the Iterator. it.To(c)\rSamples\nfrom_to ↗ ","date":"2024-05-07","id":25,"permalink":"/gx/doc/features/iterator/","summary":"\u003cp\u003eIn contrast to eager evaluation where evaluation is performed immediately, an Iterator is lazily evaluated, i.e. not evaluated until it\u0026rsquo;s necessary, e.g. when you drain an Iterator.\u003c/p\u003e","tags":[],"title":"Generic Iterator with Lazy Evaluation"},{"content":"NanoID A Go implementation of NanoID ↗ .\nNanoID can be expressed as regex [A-Za-z0-9_-]{21}. NanoID is case-sensative.\nIn contrast to UUID v4,\nsimilar collision probability. shorter: NanoID uses a larger alphabet (64 vs 16), and therefore shorter size (21 vs 36) under similar collision probability. safer: NanoID uses a cryptographically secure random generator. Use import \u0026#34;github.com/burningxflame/gx/id/nanoid\u0026#34; // generate a NanoID id, err := nanoid.New() // Create a generator which generates NanoID in batches, for better performance. // The batchSize specifies the number of NanoIDs to generate in each batch. gen := nanoid.Generator(batchSize) // generate a NanoID by calling generator id, err := gen() // Concurrency-safe version of Generator gen := nanoid.ConGenerator(batchSize) id, err := gen()\rBenchmark goos: darwin goarch: amd64 cpu: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz BenchmarkNew-12 904230 1270 ns/op 48 B/op 2 allocs/op // batchSize: 10 ~ 10000 BenchmarkGenerator/10-12 6925892 172.1 ns/op 24 B/op 1 allocs/op BenchmarkGenerator/100-12 7849317 154.5 ns/op 24 B/op 1 allocs/op BenchmarkGenerator/1000-12 8230513 144.5 ns/op 24 B/op 1 allocs/op BenchmarkGenerator/10000-12 8430886 141.2 ns/op 24 B/op 1 allocs/op // batchSize: 10 ~ 10000 BenchmarkConGenerator/10-12 4647276\t254.7 ns/op\t24 B/op\t1 allocs/op BenchmarkConGenerator/100-12 5425093\t217.4 ns/op\t24 B/op\t1 allocs/op BenchmarkConGenerator/1000-12 5392015\t219.8 ns/op\t24 B/op\t1 allocs/op BenchmarkConGenerator/10000-12 5167356\t233.1 ns/op\t24 B/op\t1 allocs/op\rUUID UUID v4 and secure UUID v4.\nUUID v4 uses a pseudo-random generator.\nSecure UUID v4 uses a cryptographically secure random generator.\nUse import \u0026#34;github.com/burningxflame/gx/id/uuid\u0026#34; // Generate a UUID v4 id := uuid.New() // Generate a secure UUID v4 id, err := uuid.NewSec() // Create a generator which generates secure UUID v4 in batches, for better performance. // The batchSize specifies the number of UUIDs to generate in each batch. gen := uuid.SecGenerator(batchSize) // generate a UUID by calling generator id, err := gen() // Concurrency-safe version of SecGenerator gen := uuid.SecConGenerator(batchSize) id, err := gen()\rBenchmark goos: darwin goarch: amd64 cpu: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz BenchmarkNew-12 13437386 87.45 ns/op 64 B/op 2 allocs/op BenchmarkNewSec-12 755618 1400 ns/op 80 B/op 3 allocs/op BenchmarkSecGenerator/10-12 5504864 221.1 ns/op 64 B/op 2 allocs/op BenchmarkSecGenerator/100-12 6727554 170.5 ns/op 64 B/op 2 allocs/op BenchmarkSecGenerator/1000-12 7639945 145.9 ns/op 64 B/op 2 allocs/op BenchmarkSecGenerator/10000-12 7874086 145.8 ns/op 64 B/op 2 allocs/op BenchmarkSecConGenerator/10-12 4009354 269.7 ns/op 64 B/op 2 allocs/op BenchmarkSecConGenerator/100-12 5280829 223.8 ns/op 64 B/op 2 allocs/op BenchmarkSecConGenerator/1000-12 5449786 218.1 ns/op 64 B/op 2 allocs/op BenchmarkSecConGenerator/10000-12 4941277 224.3 ns/op 64 B/op 2 allocs/op\r","date":"2024-05-07","id":26,"permalink":"/gx/doc/features/id/","summary":"\u003ch2 id=\"nanoid\"\u003eNanoID\u003c/h2\u003e\n\u003cp\u003eA Go implementation of \u003ca href=\"https://github.com/ai/nanoid/blob/main/README.md\"   target=\"_blank\" \u003e\n    NanoID\n     ↗ \n\u003c/a\u003e\n.\u003cbr\u003e\nNanoID can be expressed as regex \u003ccode\u003e[A-Za-z0-9_-]{21}\u003c/code\u003e. NanoID is case-sensative.\u003c/p\u003e\n\u003cp\u003eIn contrast to UUID v4,\u003c/p\u003e","tags":[],"title":"ID"},{"content":"Logging Facade Log is a logging facade with leveled logging, tagged logging.\nFor Logger Implementers Implement interface log.Logger // A concrete logger should implement interface Logger. type Logger interface { // Print a log message Printf(format string, v ...any) // Close the logger. Flush buffer, close files, etc. Close() error }\rRegister Self as the Global Logger Call log.Set to register self as the global logger, in two methods:\nMethod 1:\nCall log.Set in init, and therefore registered when the package is imported.\npackage dummy_log_x import \u0026#34;github.com/burningxflame/gx/log/log\u0026#34; func init() { logger := ... log.Set(logger, log.LevelInfo) }\rMethod 2:\nProvide public Init functions, and call log.Set in those Init functions.\npackage dummy_log_y import \u0026#34;github.com/burningxflame/gx/log/log\u0026#34; func InitRuntimeLog(...) { ... log.Set(...) } func InitTestLog() { ... log.Set(...) }\rFor Logger Users Register a Logger Corresponding to the 2 methods in above section .\nMethod 1:\npackage main // register a logger on package import import ( \u0026#34;github.com/burningxflame/gx/log/log\u0026#34; _ \u0026#34;dummy_log_x\u0026#34; ) func main(){ // Close the logger. Flush buffer, close files, etc. // Must be called before process exit. defer log.Close() ... }\rMethod 2:\npackage main import ( \u0026#34;github.com/burningxflame/gx/log/log\u0026#34; \u0026#34;dummy_log_y\u0026#34; ) func main(){ // explicitly register a logger dummy_log_y.InitRuntimeLog(...) // Close the logger. Flush buffer, close files, etc. // Must be called before process exit. defer log.Close() ... }\rUse Logging Facade import \u0026#34;github.com/burningxflame/gx/log/log\u0026#34; // Leveled Logging log.Error(...) log.Warn(...) log.Info(...) log.Debug(...) log.Trace(...) // Tagged Logging. // Create a TagLogger, which prints \u0026#34;[tag]\u0026#34; before every log message. e.g. \u0026#34;INFO [tag] some msg\u0026#34;. // Usually used for module-specific logging, request-specific logging, etc. tl := log.WithTag(\u0026#34;tag\u0026#34;) tl.Error(...) tl.Warn(...) tl.Info(...) tl.Debug(...) tl.Trace(...) // Tag Chain. // WithTag may be chained together. e.g. WithTag(\u0026#34;tag\u0026#34;).WithTag(\u0026#34;tag2\u0026#34;) creates a TagLogger, which prints \u0026#34;[tag] [tag2]\u0026#34; before every log message. tl2 := tl.WithTag(\u0026#34;tag2\u0026#34;) tl2.Error(...) tl2.Warn(...) tl2.Info(...) tl2.Debug(...) tl2.Trace(...)\rLight Logger Light is an all-in-one logger.\nLight Logger = Go Std Log Wrapper + Concurrent Buffer Writer (with Auto Flusher) + Log Rotator.\nUse Use in Production:\nimport \u0026#34;github.com/burningxflame/gx/log/light\u0026#34; err := light.Init(light.Conf{ // Log level. Default to LevelError. Level: log.LevelInfo, // Log format flag. Refer to go std log. Default to LstdFlags | Lmicroseconds | Lmsgprefix. Format: ..., // Buffer Size in bytes. Default to 1M. BufSize: 1\u0026lt;\u0026lt;20, // Auto-flush interval. Default to 5s. FlushInterval: time.Second*5, // Log-rotating config Rc: light.RotateConf{ // Fullpath of log file FilePath: ..., // Max byte size of a log file. If a file exceeds this size, the file will be rotated. Default to 10MB. FileSize: 10\u0026lt;\u0026lt;20, // Max number of old log files. Older files will be removed. NBak: 2, // Permission of log file. Default to 0600. Perm: 0600, // If true, rotated log files will not be compressed. Otherwise, rotated log files will be compressed with gzip. NoCompress: false, // If ture, rotated log files will be renamed based on UTC time. Local time otherwise. Utc: false, }, })\rUse in Test:\nimport \u0026#34;github.com/burningxflame/gx/log/light\u0026#34; // For test purpose, create a simple logger, and register it as the global logger. // All log messages will be written to stdout, and log leve is debug. err := light.InitTestLog()\rPerformance Message Size(B) Time Cost Per Message (ns) Converted into Disk IO Speed (MB/s) 98 454.4 206 354 627.6 538 goos: darwin goarch: amd64 cpu: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz Benchmark/short-12 2644009\t454.4 ns/op\t82 B/op\t1 allocs/op Benchmark/long-12 1719120\t627.6 ns/op\t357 B/op\t1 allocs/op\rConcurrent Buffer Writer Conbuf is a concurrency-safe buffer writer.\nimport \u0026#34;github.com/burningxflame/gx/log/conbuf\u0026#34; // Wrap a Writer and create a concurrent Buffer Writer bw := conbuf.NewWriter(w, bufSize)\rPerformance:\ngoos: darwin goarch: amd64 cpu: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz BenchmarkBufWriter-12 12018157\t96.62 ns/op\t0 B/op\t0 allocs/op BenchmarkNoBuf-12 286538\t3540 ns/op\t0 B/op\t0 allocs/op\rAuto-Flusher Auto-Flusher wraps a WriteFlusher and returns another WriteFlusher which auto flushes the wrapped WriteFlusher at certain intervals.\nAutoFlusher can be useful when you want to check fresh log messages, but the buffer is not full and therefore not flushed yet.\nimport \u0026#34;github.com/burningxflame/gx/log/conbuf\u0026#34; // Wrap a WriteFlusher and return another WriteFlusher which auto flushes the wrapped WriteFlusher at certain intervals until ctx.Done channel is closed. fw := conbuf.WithAutoFlush( ctx, w, // the WriteFlusher to be wrapped interval, // the flush interval // Specify a buffer chan if you want to receive background flush errors if any. Leave it nil otherwise. chErr, )\rLog Rotator Log Rotator provides abilities such as\nrotating log files compressing rotated files removing old files re-create log files if deleted from outside import \u0026#34;github.com/burningxflame/gx/log/rotate\u0026#34; // Create a log rotator. The returned wc is a WriteCloser. wc, err := rotate.New(rotate.Conf{ // Fullpath of log file FilePath: ..., // Max byte size of a log file. If a file exceeds this size, the file will be rotated. Default to 10MB. FileSize: 10\u0026lt;\u0026lt;20, // Max number of old log files. Older files will be removed. NBak: 2, // Permission of log file. Default to 0600. Perm: 0600, // If true, rotated log files will not be compressed. Otherwise, rotated log files will be compressed with gzip. NoCompress: false, // If ture, rotated log files will be renamed based on UTC time. Local time otherwise. Utc: false, }) ... // Close the log rotator. Close files, finish handling backups, etc. // Must be called before process exit. wc.Close()\rExtension Light is an all-in-one logger. However you may perfer another.\nYou can\nwrap the logger you preferred, Implement interface log.Logger , and then Use Logging Facade for consistent user experience. enhance the logger you preferred by combining the logger with Concurrent Buffer Writer , Auto-Flusher , and/or Log Rotator . ","date":"2024-05-07","id":27,"permalink":"/gx/doc/features/log/","summary":"\u003ch2 id=\"logging-facade\"\u003eLogging Facade\u003c/h2\u003e\n\u003cp\u003eLog is a logging facade with leveled logging, tagged logging.\u003c/p\u003e\n\u003ch3 id=\"for-logger-implementers\"\u003eFor Logger Implementers\u003c/h3\u003e\n\u003ch4 id=\"implement-interface-loglogger\"\u003eImplement interface log.Logger\u003c/h4\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// A concrete logger should implement interface Logger.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003eLogger\u003c/span\u003e \u003cspan class=\"kd\"\u003einterface\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Print a log message\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003ePrintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eformat\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ev\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"nx\"\u003eany\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Close the logger. Flush buffer, close files, etc.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nf\"\u003eClose\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch4 id=\"register-self-as-the-global-logger\"\u003eRegister Self as the Global Logger\u003c/h4\u003e\n\u003cp\u003eCall \u003ccode\u003elog.Set\u003c/code\u003e to register self as the global logger, in two methods:\u003c/p\u003e","tags":[],"title":"Logging"},{"content":"Connection Pool ConnPool is a concurrency-safe connection pool.\nimport \u0026#34;github.com/burningxflame/gx/net/connpool\u0026#34; // Create a connection pool pool, err := connpool.New(connpool.Conf{ // Initial number of connections in the pool Init: 8, // Max number of connections in the pool Cap: 16, // Used to create a connection New: func() (net.Conn, error) {...}, // Used to check whether a connection is still connected. Ping returns nil if still connected. Ping: func(conn net.Conn) error {...}, // Timeout of New and Ping. Abandon the call to New or Ping after the timeout elapses. Timeout time.Duration }) // Get a connection from the pool. // If the connection is not connected any more, will drop it and get another, until a connected connection is found. // If no connection in the pool is connected, will create a new one. conn, err := pool.Get() // Put a connection back to the pool. // Will close and drop the connection if the pool is full. // Nil connection is ignored. pool.Put(conn) // Close all connections in the pool pool.Close()\rSOCKS5 SOCKS is a client-side implementation of the SOCKS5 proxy protocol.\nimport ( \u0026#34;net\u0026#34; \u0026#34;github.com/burningxflame/gx/net/socks\u0026#34; ) // Connect to SOCKS5 proxy conn, err := net.Dial(\u0026#34;tcp\u0026#34;, socksAddr) if err != nil { return err } // SOCKS5 client-side handshake. // The destAddr is the destination address to connect to through SOCKS5 proxy. err = socks.ClientHandshake(conn, destAddr)\rFake Conn FakeConn creates net.Conns for testing purpose. Very useful for testing network protocols.\nimport \u0026#34;github.com/burningxflame/gx/net/fakeconn\u0026#34; // Create a connection for testing purpose conn := fakeconn.New() // ... use the conn // Create a pair of connections for testing purpose cltConn, srvConn := NewPair() // ... use the conns BiCopy import \u0026#34;github.com/burningxflame/gx/net/conns\u0026#34; // Copy between a and b in both directions, until either EOF is reached on both directions or an error occurs. // Return the number of bytes copied from a to b, the number of bytes copied from b to a, and error if any. nA2B, nB2A, err := conns.BiCopy(a, b)\rIdle Timeout import \u0026#34;github.com/burningxflame/gx/net/conns\u0026#34; // If no data has been sent from conn by the time the timeout period elapses, conn.Read will return ErrIdleTimeout. // Zero timeout means no timeout. conn, err := conns.WithIdleTimeout(conn, timeout)\r","date":"2024-05-07","id":28,"permalink":"/gx/doc/features/net/","summary":"\u003ch2 id=\"connection-pool\"\u003eConnection Pool\u003c/h2\u003e\n\u003cp\u003eConnPool is a concurrency-safe connection pool.\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;github.com/burningxflame/gx/net/connpool\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Create a connection pool\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nx\"\u003epool\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003econnpool\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eNew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003econnpool\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eConf\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Initial number of connections in the pool\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eInit\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Max number of connections in the pool\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eCap\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e  \u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Used to create a connection\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eNew\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e  \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eConn\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Used to check whether a connection is still connected. Ping returns nil if still connected.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003ePing\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003econn\u003c/span\u003e \u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eConn\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Timeout of New and Ping. Abandon the call to New or Ping after the timeout elapses.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eTimeout\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eDuration\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Get a connection from the pool.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// If the connection is not connected any more, will drop it and get another, until a connected connection is found.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// If no connection in the pool is connected, will create a new one.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nx\"\u003econn\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003epool\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eGet\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Put a connection back to the pool.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Will close and drop the connection if the pool is full.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Nil connection is ignored.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nx\"\u003epool\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ePut\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003econn\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Close all connections in the pool\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nx\"\u003epool\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eClose\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"socks5\"\u003eSOCKS5\u003c/h2\u003e\n\u003cp\u003eSOCKS is a client-side implementation of the SOCKS5 proxy protocol.\u003c/p\u003e","tags":[],"title":"Net"},{"content":"Provides utilities to improve application reliability.\nTypical Use Case For example, you develop a TCP service, and deploy the service to K8S.\nCase 1: Container restarts because the service process exits abnormally.\nProblem: It usually takes seconds ~ dozens of seconds before the container is up again.\nBetter Solution: Let the process-level guardian guard your service process. Even though your service process exits abnormally, the container keeps alive, because the guardian keeps alive. The guardian launches your service process instantly, and therefore decreases downtime to 0.\nCase 2: Client connections are closed because server process exits.\nProblem: Clients have to re-connect the server.\nBetter Solution: Let the goroutine-level guardian guard your service goroutine. Even though your service exits abnormally, the process keeps alive, because the guardian keeps alive. The guardian launches your service instantly, and therefore decreases downtime to 0. Furthermore, all established connections remain intact.\nCase 3: Auto-restart service on config change.\nProblem: Same as Case 1 and 2.\nBetter Solution: Let the auto-reloader watch the config file, and reload your service on config changes. It avoids container restart and process restart, and therefore decreases downtime to 0. Furthermore, all established connections remain intact.\nProcess-Level Guardian Supervisor starts and guards processes.\nInstall supervisor:\n# install location: $(go env GOPATH)/bin/. go install github.com/burningxflame/gx/reliable/supervisor/cmd/supervisor@latest\rRun supervisor:\nsupervisor conf.yaml\rSample config file ↗ .\nGoroutine-Level Guardian Guard starts and guards a function.\nimport ( \u0026#34;github.com/burningxflame/gx/reliable/guard\u0026#34; \u0026#34;github.com/burningxflame/gx/reliable/backoff\u0026#34; ) // Auto re-run a function until it succeeds (aka, returns nil error) or ctx.Done channel is closed. // If AlsoRetryOnSuccess is true, auto re-run a function until ctx.Done channel is closed. guard.WithGuard(ctx, guard.Conf{ // The func to be guarded. // Fn should return ASAP when ctx.Done channel is closed, which usually indicates an exit signal is sent. Fn: func(ctx context.Context) error { ... }, // Backoff strategy determines how long to wait between retries. Bf: backoff.Default(), // If true, re-run Fn even if it returns nil error. AlsoRetryOnSuccess: false, // Used to tag log messages Tag: \u0026#34;someTag\u0026#34;, // A TagLogger used to log messages Log: ..., })\rSample: Start and guard a service until ctx.Done channel is closed.\ngo guard.WithGuard(ctx, guard.Conf{ Fn: func(ctx context.Context) error { return serve(ctx) }, Bf: backoff.Default(), AlsoRetryOnSuccess: true, Tag: \u0026#34;someService\u0026#34;, })\rSample: Retry a task until it succeeds or ctx.Done channel is closed.\ngo guard.WithGuard(ctx, guard.Conf{ Fn: func(ctx context.Context) error { return task(ctx) }, Bf: backoff.Default(), Tag: \u0026#34;someTask\u0026#34;, })\rAuto-Reload on Config Changes Auto-Reloader starts and re-run a function on config changes.\nimport ( \u0026#34;github.com/burningxflame/gx/reliable/autoreload\u0026#34; \u0026#34;github.com/burningxflame/gx/reliable/backoff\u0026#34; ) // Watch a config file, and re-run a func on config changes. // Will retry watching if the conf file is removed. autoreload.WithAutoReload(ctx, Conf[C]{ // Path of the config file Path: \u0026#34;/some/path\u0026#34;, // Used to load config file on file write event. The returned C is the loaded config. // If C is the same as the last, it\u0026#39;s ignored. Load: func(path string) (C, error), // Process is the func to be reloaded. C is the config loaded by Load. // Process should return ASAP when ctx.Done channel is closed. Process: func(ctx context.Context, c C), // Backoff strategy determines how long to wait between retries. Bf: backoff.Default(), // Used to tag log messages Tag: \u0026#34;someTag\u0026#34;, // A TagLogger used to log messages Log: ..., })\rBackoff Backoff is usually used to determine how long to wait between retries.\nimport \u0026#34;github.com/burningxflame/gx/reliable/backoff\u0026#34; // Create a Backoff. bf := backoff.New(backoff.Conf{ // Min delay Min: time.Millisecond, // Max delay Max: time.Second * 30, // Unit of increment Unit: time.Second, // Strategy of increment. Linear or Exponent. Strategy: backoff.Exponent, // If a retry lasts longer than ResetAfter, the next delay will be reset to Min. ResetAfter: time.Second * 30, }) // Return the next delay. dur := bf.Next()\rReadiness Readiness is a TCP Server for readiness check (aka, health check). Only for connectivity check. For security purpose, no sending data nor receiving data.\nimport \u0026#34;github.com/burningxflame/gx/reliable/readiness\u0026#34; // Create a TCP Server for readiness check srv := \u0026amp;readiness.Server { // The address to listen Addr: \u0026#34;host:port\u0026#34;, // Used to tag log messages. Default to \u0026#34;readiness\u0026#34;. Tag: \u0026#34;readiness\u0026#34;, // A TagLogger used to log messages Log: ..., } // Start the Server err := srv.Serve(ctx)\rYou may guard it:\nimport ( \u0026#34;github.com/burningxflame/gx/reliable/readiness\u0026#34; \u0026#34;github.com/burningxflame/gx/reliable/guard\u0026#34; \u0026#34;github.com/burningxflame/gx/reliable/backoff\u0026#34; ) go guard.WithGuard(ctx, guard.Conf{ Fn: func(ctx context.Context) error { return srv.Serve(ctx) }, Bf: backoff.Default(), AlsoRetryOnSuccess: true, Tag: \u0026#34;readiness\u0026#34;, })\rTimeout Decorator A Timeout Decorator abandons the call to the wrapped function if the call does not finish in a specified duration.\nThere\u0026rsquo;re 4 variants, each for a type of functions. All functions can be classfied into these four.\n// Timeout Decorator for functions with input and output parameters, i.e func(I) (O, error) func WithTimeoutIO[I, O any](timeout time.Duration, fn func(I) (O, error)) func(I) (O, error) // Timeout Decorator for functions with input parameters only, i.e func(I) error func WithTimeoutI[I any](timeout time.Duration, fn func(I) error) func(I) error // Timeout Decorator for functions with output parameters only, i.e func() (O, error) func WithTimeoutO[O any](timeout time.Duration, fn func() (O, error)) func() (O, error) // Timeout Decorator for functions with neither input nor output parameters, i.e func() error func WithTimeout(timeout time.Duration, fn func() error) func() error\rimport \u0026#34;github.com/burningxflame/gx/reliable/timeouts\u0026#34; fn = timeouts.WithTimeout(timeout, fn)\rSamples\ntimeout_decorator ↗ ","date":"2024-05-07","id":29,"permalink":"/gx/doc/features/reliable/","summary":"\u003cp\u003eProvides utilities to improve application reliability.\u003c/p\u003e\n\u003ch2 id=\"typical-use-case\"\u003eTypical Use Case\u003c/h2\u003e\n\u003cp\u003eFor example, you develop a TCP service, and deploy the service to K8S.\u003c/p\u003e","tags":[],"title":"Reliable"},{"content":"Goroutine ID GID provides an extremely fast (1.2 ns) method to get the ID of the current goroutine.\nMore precisely speaking, it\u0026rsquo;s the address of the current g (i.e. goroutine). Therefore, the ID makes sense only during the life cycle of the current goroutine.\nIt\u0026rsquo;s implemented by using Go Assembly.\nSupported CPU architectures: 386, amd64, arm, arm64, mips, mipsle, mips64, mips64le, ppc64, ppc64le, riscv64, s390x.\nWhy Normally you don\u0026rsquo;t need to get the ID of the current goroutine, unless you\u0026rsquo;re implementing a goroutine local storage.\nUse import \u0026#34;github.com/burningxflame/gx/runtime/gid\u0026#34; // Return the ID of the current goroutine. // More precisely speaking, it\u0026#39;s the address of the current g (i.e. goroutine). Therefore, the ID makes sense only during the life cycle of the current goroutine. id := gid.Gid()\rBenchmark goos: darwin goarch: amd64 cpu: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz BenchmarkGid-12 903557202\t1.268 ns/op\t0 B/op\t0 allocs/op\rGoroutine Local Storage GLS provides an extremely fast Goroutine Local Storage.\nWhy Normally you don\u0026rsquo;t need goroutine local storage, because Context is better.\nUnless you want to implement distributed tracing (or serverless, or other context-passing cases) at minimal cost for a legacy codebase where Context is not used widely or even not used at all.\nKey Design Key points to design a goroutine local storage:\nHow to get the ID of the current goroutine? This is vital to relating goroutines and goroutine local storages. And this is vital to performance. What to use as goroutine local storage? This is vital to performance. How to detect goroutine creation? This is vital to creating goroutine local storage. How to detect goroutine exit? This is vital to removing goroutine local storage instantly and therefore minimizing memory footprint. Minimizing cost to apply goroutine local storage in a legacy codebase. As follows are my choices:\nUse Go Assembly to get the address of the current g (i.e. goroutine), and use it as the ID of the current goroutine. It\u0026rsquo;s extremely fast. See Goroutine ID . Use std Value Context (context.WithValue) as goroutine local storage. In context-passing cases such as distributed tracing, serverless, etc, a goroutine local storage is copied mostly, read mostly, and written rarely.\nValue Context is pointer, and therefore can be copied at almost zero cost.\nValue Context is immutable because it provides no API to modify itself, and therefore is concurrency-safe.\nIn conclusion, Value Context is perfect for goroutine local storage. Use a custom function Go instead of the keyword go to spawn a goroutine. Therefore we know exactly when a goroutine is created or exits. See 3. Use Go AST to create a code generator which scans a codebase and replaces all keyword go with function Go. See G2G Use import \u0026#34;github.com/burningxflame/gx/runtime/gls\u0026#34; // Associate the value with the key in the current goroutine local storage. gls.Put(key, value) // Return the value corresponding to the key in the current goroutine local storage. value := gls.Get(key) // Use function `Go` instead of the keyword `go` to spawn a goroutine. The spawned goroutine inherits local storage from its parent goroutine. gls.Go(func(){ ... // cv == value, because the spawned goroutine inherits local storage from its parent goroutine. cv := gls.Get(key) // Put another k-v pair. gls.Put(key2, value2) })\rBenchmark goos: darwin goarch: amd64 cpu: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz BenchmarkGlsGet-12 28428370\t37.74 ns/op\t8 B/op\t1 allocs/op // Cost of GLS (create and drop GLS): 534-263=271 ns per goroutine BenchmarkGlsCostA-12 2271580\t534.1 ns/op\t105 B/op\t5 allocs/op BenchmarkGlsCostB-12 4524012\t263.5 ns/op\t16 B/op\t1 allocs/op\rG2G G2G is a code generator which scans a codebase and replaces all keyword go with function Go.\nIt also takes care of the closure problem of for/range.\nIt\u0026rsquo;s implemented by using Go AST.\nUse go install github.com/burningxflame/gx/runtime/g2g@latest g2g \u0026lt;path\u0026gt;\r","date":"2024-05-07","id":30,"permalink":"/gx/doc/features/runtime/","summary":"\u003ch2 id=\"goroutine-id\"\u003eGoroutine ID\u003c/h2\u003e\n\u003cp\u003eGID provides an extremely fast (1.2 ns) method to get the ID of the current goroutine.\u003cbr\u003e\nMore precisely speaking, it\u0026rsquo;s the address of the current g (i.e. goroutine). Therefore, the ID makes sense only during the life cycle of the current goroutine.\u003c/p\u003e","tags":[],"title":"Runtime"},{"content":"Provides utilities to improve application security.\nSecure TCP Server The Secure TCP Server has builtin abilities to\ngraceful shutdown defend against DDoS attacks by limiting max number of concurrent connections close idle connections defend against slow attacks get peer identity generate connection id etc. import ( \u0026#34;github.com/burningxflame/gx/secure/tcp\u0026#34; \u0026#34;github.com/burningxflame/gx/sync/sem\u0026#34; ) // Create a Secure TCP Server srv := \u0026amp;tcp.Server{ // The address to listen Addr: \u0026#34;host:port\u0026#34;, // Connection handler is where you communicate with a client, i.e. receive/send data from/to a client. // Connection handler should return ASAP when ctx.Done channel is closed, which usually indicates an exit signal is sent. ConnHandler: func(ctx context.Context, conn net.Conn) error { ... }, // If graceful shutdown takes longer than ShutdownTimeout, exit instantly. // Default to no timeout. ShutdownTimeout: time.Second*3, // Used to limit max number of concurrent connections // Default to no limit. ConnLimiter: sem.New(n), // If no data is sent from a connection in the specified duration, close the connection. // Default to no timeout. IdleTimeout: time.Minute, // Used for TLS handshake. If not provided, no TLS handshake. TlsConfig *tls.Config // If TLS handshake does not finish in the specified duration, close the connection. // Default to no timeout. TlsHandshakeTimeout: time.Second*5 // If true, the Context argument of ConnHandler contains the identity of the TLS peer. // Call GetTlsPeer(ctx) to get peer identity. // And of course the peer should send a certificate, i.e. TlsConfig.ClientAuth should be RequireAnyClientCert or RequireAndVerifyClientCert. // Peer identity is a set of Common Name and SAN DNS Names of certificate holder, i.e. cert.Subject.CommonName and cert.DNSNames. CtxTlsPeer: false // If true, the Context argument of ConnHandler contains the connection id. // Call GetConnId(ctx) to get connection id. CtxConnId: false // Used to tag log messages Tag: \u0026#34;someTag\u0026#34;, // A TagLogger used to log messages Log: ..., } // Start the Server err := s.Serve(ctx)\rConnection Handler is where you communicate with a client, i.e. receive/send data from/to a client. Connection handler should return ASAP when ctx.Done channel is closed, which usually indicates an exit signal is sent.\nfunc handleConn(ctx context.Context, conn net.Conn) error { ... // Return the identity of the TLS peer. See Server.CtxTlsPeer peer, ok := tcp.GetTlsPeer(ctx) ... // Return the connection id. See Server.CtxConnId connId, ok := tcp.GetConnId(ctx) ... }\rSecure HTTP Server The Secure HTTP Server has builtin abilities to\ngraceful shutdown defend against DDoS attacks by limiting max number of concurrent requests etc. import ( \u0026#34;net/http\u0026#34; sh \u0026#34;github.com/burningxflame/gx/secure/http\u0026#34; \u0026#34;github.com/burningxflame/gx/sync/sem\u0026#34; ) // Create a Secure HTTP Server srv := \u0026amp;sh.Server{ // http.Server in std lib Std: http.Server{ Addr: ..., Handler: ..., TLSConfig: ..., ... }, // Used to limit max number of concurrent requests. // Default to no limit. Limiter: sem.New(n), // If graceful shutdown takes longer than ShutdownTimeout, exit instantly. ShutdownTimeout: time.Second*3, // Used to tag log messages Tag: \u0026#34;someTag\u0026#34;, // A TagLogger used to log messages Log: ..., } // Start the Server err := s.Serve(ctx)\rIdle Timeout Deprecated. Use Net / Idle Timeout instead.\nimport \u0026#34;github.com/burningxflame/gx/secure/conns\u0026#34; // If no data has been sent from conn by the time the timeout period elapses, conn.Read will return ErrIdleTimeout. // Zero timeout means no timeout. conn, err := conns.WithIdleTimeout(conn, timeout)\r","date":"2024-05-07","id":31,"permalink":"/gx/doc/features/secure/","summary":"\u003cp\u003eProvides utilities to improve application security.\u003c/p\u003e\n\u003ch2 id=\"secure-tcp-server\"\u003eSecure TCP Server\u003c/h2\u003e\n\u003cp\u003eThe Secure TCP Server has builtin abilities to\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003egraceful shutdown\u003c/li\u003e\n\u003cli\u003edefend against DDoS attacks by limiting max number of concurrent connections\u003c/li\u003e\n\u003cli\u003eclose idle connections\u003c/li\u003e\n\u003cli\u003edefend against slow attacks\u003c/li\u003e\n\u003cli\u003eget peer identity\u003c/li\u003e\n\u003cli\u003egenerate connection id\u003c/li\u003e\n\u003cli\u003eetc.\u003c/li\u003e\n\u003c/ul\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s\"\u003e\u0026#34;github.com/burningxflame/gx/secure/tcp\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s\"\u003e\u0026#34;github.com/burningxflame/gx/sync/sem\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Create a Secure TCP Server\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nx\"\u003esrv\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003etcp\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eServer\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// The address to listen\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;host:port\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Connection handler is where you communicate with a client, i.e. receive/send data from/to a client.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Connection handler should return ASAP when ctx.Done channel is closed, which usually indicates an exit signal is sent.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eConnHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ectx\u003c/span\u003e \u003cspan class=\"nx\"\u003econtext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eContext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003econn\u003c/span\u003e \u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eConn\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// If graceful shutdown takes longer than ShutdownTimeout, exit instantly.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Default to no timeout.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eShutdownTimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Used to limit max number of concurrent connections\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Default to no limit.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eConnLimiter\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003esem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eNew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// If no data is sent from a connection in the specified duration, close the connection.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Default to no timeout.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eIdleTimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMinute\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Used for TLS handshake. If not provided, no TLS handshake.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eTlsConfig\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"nx\"\u003etls\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eConfig\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// If TLS handshake does not finish in the specified duration, close the connection.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Default to no timeout.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eTlsHandshakeTimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// If true, the Context argument of ConnHandler contains the identity of the TLS peer.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Call GetTlsPeer(ctx) to get peer identity.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// And of course the peer should send a certificate, i.e. TlsConfig.ClientAuth should be RequireAnyClientCert or RequireAndVerifyClientCert.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Peer identity is a set of Common Name and SAN DNS Names of certificate holder, i.e. cert.Subject.CommonName and cert.DNSNames.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eCtxTlsPeer\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// If true, the Context argument of ConnHandler contains the connection id.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Call GetConnId(ctx) to get connection id.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eCtxConnId\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Used to tag log messages\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eTag\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;someTag\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// A TagLogger used to log messages\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eLog\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Start the Server\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eServe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ectx\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003cstrong\u003eConnection Handler\u003c/strong\u003e is where you communicate with a client, i.e. receive/send data from/to a client. Connection handler should return ASAP when ctx.Done channel is closed, which usually indicates an exit signal is sent.\u003c/p\u003e","tags":[],"title":"Secure"},{"content":"A powerful, lightweight and easy-to-use Stream Processing library written in Go.\nIdeal for situations where there are too few resources to run Flink and Java.\nBasic Types import \u0026#34;github.com/burningxflame/gx/stream\u0026#34;\rEvent // Event represents something that happened, e.g. order, payment, alarm, etc. // Event is immutable and therefore concurrency-safe. // Event is pointer internally, and therefore can be copied at almost zero cost. type Event struct { // unexported fields } // Create an Event func NewEvent(id Id, tm time.Time, data any) Event // Id of Event type Id string // Id of Event func (e Event) Id() Id // Time of Event func (e Event) Time() time.Time // Data of Event func (e Event) Data() any // Return a copy of Event e, in which the data is replaced. func (e Event) Replace(data any) Event // Create an Event without id nor time func NewDataEvent(data any) Event\rSource // Source produces Events constantly. type Source interface { // Initialize the Source. Init() error // Produce Events and send them to the output stream (i.e. channel out). // Produce should return ASAP when ctx.Done channel is closed, which usually indicates an exit signal is sent. Produce(ctx context.Context, out chan\u0026lt;- Event) // Receive acks from the input stream (i.e. channel ack). An ack indicates the corresponding Event is processed. Ack(ctx context.Context, ack \u0026lt;-chan Id) }\rSink // Sink stores Events in files, DBs, external systems, etc. type Sink interface { // Initialize the Sink. Init() error // Sink Events from the input stream (i.e. channel in), and send acks to the output stream (i.e. channel ack). Sink(ctx context.Context, in \u0026lt;-chan Event, ack chan\u0026lt;- Id) }\rProcessor // Processor processes Events. type Processor interface { // Initialize the Processor. Init() error // Process Events from the input stream (i.e. channel in), and send results to the output streams (i.e. OutStreams outs). Process(ctx context.Context, in \u0026lt;-chan Event, outs OutStreams) } /* Output Streams. An Event may be output to one of the following streams: - Next: Events are sent to the next Processor in the pipelines of Processors. - Sink: Events are sent directly to Sink, ignoring all subsequent Processors in the pipelines of Processors. - Drop: Events are dropped, ignoring all subsequent Processors in the pipelines of Processors. */ type OutStreams struct { Next chan\u0026lt;- Event Sink chan\u0026lt;- Event Drop chan\u0026lt;- Id } // Indicate which Output stream the Event will be sent to. type EventOut struct { Event Event Out Out } // Indicate an Output stream. See also OutStreams. type Out byte const ( OutNext Out = iota + 1 OutSink OutDrop )\rStream Processing // Stream Processing is a composite of Source, Processor and Sink. type StreamProc struct { Src Source Proc Processor Sink Sink // Channel Size. Defaults to the const ChanSize. ChanSize int } // Start Stream Processing func (s *StreamProc) Run(ctx context.Context) error // Default Channel Size const ChanSize = 1024\rBasic Processors import \u0026#34;github.com/burningxflame/gx/stream\u0026#34;\rFilter, Map // Filter and/or Map. // Call Filter for each Event from the input stream, and drop those for which Filter returns false. // If Filter is nil, no Event is dropped. // For those left, call Map for each Event, and send the result to the output stream Next. // If Map is nil, the Event itself is sent to the output stream Next. type FilterMap struct { Filter func(Event) bool Map func(Event) Event }\rReduce, KeyedReduce // Consume Events from the input stream, and calculate a result. // Once the input stream is closed, send the result to the output stream Next, and drop all consumed Events. // If Interval is specified, periodically send intermediate results and drop consumed Events. type Reduce struct { Reducer Reducer Interval time.Duration } // Like Reduce, but split the input stream into multiple streams by KeyFn, and Reduce each stream separately. type KeyedReduce[K comparable] struct { KeyFn func(Event) K // Reducer Generator ReducerGen func() Reducer Interval time.Duration } // Consume Events and calculate a result. type Reducer interface { // Consume an Event and update the result. Add(e Event) // Return the result. Result() ReduceResult // Clear the result so that the Reducer can be reused. Clear() // Tag the Reducer with the specified k-v pair. // Tags can be retrived from ReduceResult later. Tag(k, v any) // Set the value of the pre-defined tag key. // Commonly used by keyed Processors such as KeyedReduce. TagKey(v any) // Set the value of the pre-defined tag window. // Commonly used by window Processors such as TumblingWindow, SlidingWindow. TagWindow(v any) } // Create a Reducer. // The Reducer applies fn to ini and the first Event, // then applies fn to that result and the second Event, and so on. func NewReducer[R any](ini R, fn func(R, Event) R) Reducer // Represent a Reduce result. type ReduceResult struct { Result any } // Return the value of tag k. func (r *ReduceResult) Tag(k any) any // Return the value of the pre-defined tag key. func (r *ReduceResult) TagKey() any // Return the value of the pre-defined tag window. func (r *ReduceResult) TagWindow() any\rCount Window Processors import \u0026#34;github.com/burningxflame/gx/stream/cntwin\u0026#34;\rTumbling Window, Keyed Tumbling Window // Tumbling Window. // Split the input stream into windows, and Reduce/Process each window separately. // Either ReducerGen or ProcFn must be specified. type TumblingWindow struct { // Window Size. The number of Events in a window. WinSize int // Reducer Generator ReducerGen func() stream.Reducer // Process a window ProcFn func(l []stream.Event) []stream.EventOut } // Keyed Tumbling Window. // Like TumblingWindow, but split the input stream into multiple streams by KeyFn, and process each stream separately. type KeyedTumblingWindow[K comparable] struct { KeyFn func(stream.Event) K WinSize int ReducerGen func() stream.Reducer ProcFn func(key K, l []stream.Event) []stream.EventOut }\rSliding Window, Keyed Sliding Window // Sliding Window. // Split the input stream into windows, and Reduce/Process each window separately. // Either ReducerGen or ProcFn must be specified. type SlidingWindow struct { // Window Size. The number of Events in a window. WinSize int // Window Slide. How frequently a window is started. WinSlide int // Reducer Generator ReducerGen func() stream.Reducer // Process a window ProcFn func(l []stream.Event) []stream.EventOut } // Keyed Sliding Window. // Like SlidingWindow, but split the input stream into multiple streams by KeyFn, and process each stream separately. type KeyedSlidingWindow[K comparable] struct { KeyFn func(stream.Event) K WinSize int WinSlide int ReducerGen func() stream.Reducer ProcFn func(key K, l []stream.Event) []stream.EventOut }\rTime Window Processors import \u0026#34;github.com/burningxflame/gx/stream/timewin\u0026#34;\rTumbling Window, Keyed Tumbling Window // Tumbling Window. // Split the input stream into windows, and Reduce/Process each window separately. // Either ReducerGen or ProcFn must be specified. type TumblingWindow struct { // Window Size WinSize time.Duration // Allowed Lateness of Event Late time.Duration // Reducer Generator ReducerGen func() stream.Reducer // Process a window. win is the start of the window. ProcFn func(win time.Time, l []stream.Event) []stream.EventOut } // Keyed Tumbling Window. // Like TumblingWindow, but split the input stream into multiple streams by KeyFn, and process each stream separately. type KeyedTumblingWindow[K comparable] struct { KeyFn func(stream.Event) K WinSize time.Duration Late time.Duration ReducerGen func() stream.Reducer ProcFn func(key K, win time.Time, l []stream.Event) []stream.EventOut }\rSliding Window, Keyed Sliding Window // Sliding Window. // Split the input stream into windows, and Reduce/Process each window separately. // Either ReducerGen or ProcFn must be specified. type SlidingWindow struct { // Window Size WinSize time.Duration // Window Slide. How frequently a window is started. WinSlide time.Duration // Allowed Lateness of Event Late time.Duration // Reducer Generator ReducerGen func() stream.Reducer // Process a window. win is the start of the window. ProcFn func(win time.Time, l []stream.Event) []stream.EventOut } // Keyed Sliding Window. // Like SlidingWindow, but split the input stream into multiple streams by KeyFn, and process each stream separately. type KeyedSlidingWindow[K comparable] struct { KeyFn func(stream.Event) K WinSize time.Duration WinSlide time.Duration Late time.Duration ReducerGen func() stream.Reducer ProcFn func(key K, win time.Time, l []stream.Event) []stream.EventOut }\rSession Window, Keyed Session Window // Session Window. // Split the input stream into windows, and Reduce/Process each window separately. // Either ReducerGen or ProcFn must be specified. type SessionWindow struct { // Session Gap Gap time.Duration // Allowed Lateness of Event Late time.Duration // Reducer Generator ReducerGen func() stream.Reducer // Process a window. win is the start of the window. ProcFn func(win time.Time, l []stream.Event) []stream.EventOut } // Keyed Session Window. // Like SessionWindow, but split the input stream into multiple streams by KeyFn, and process each stream separately. type KeyedSessionWindow[K comparable] struct { KeyFn func(stream.Event) K Gap time.Duration Late time.Duration ReducerGen func() stream.Reducer ProcFn func(key K, win time.Time, l []stream.Event) []stream.EventOut }\rComposite Processors import \u0026#34;github.com/burningxflame/gx/stream/composite\u0026#34;\rChain // Chain Processors. // The output stream (Next) of the first Processor is the input stream of the second Processor, and so on. type Chain struct { // The Processors to be chained. 2 at least. Procs []stream.Processor // Channel Size. Defaults to the const ChanSize. ChanSize int }\rDistribute // Distribute the input stream to N Processors. // Each Processor processes a portion of the input stream. type Distribute struct { // Processor Generator ProcGen func() stream.Processor // The number of Processors. 2 at least. N int }\rCompound // Compound multiple Processors into one. // Broadcast the input stream to all internal Processors, and merge the output streams. // Every Event to be processed by Compound is processed by all internal Processors, and the results are merged. type Compound struct { // The Processors to be compounded. 2 at least. Procs []stream.Processor // Merge the results of an Event. Merge func([]stream.EventOut) stream.EventOut // Channel Size. Defaults to the const ChanSize. ChanSize int }\rComposite Sources import \u0026#34;github.com/burningxflame/gx/stream/composite\u0026#34;\rMulti-Source // Combine multiple Sources into one. // All Event IDs must be unique, even if they are produced by different internal Sources. type MultiSource struct { // The Sources to be combined. 2 at least. Srcs []stream.Source // Channel Size. Defaults to the const ChanSize. ChanSize int }\rComposite Sinks import \u0026#34;github.com/burningxflame/gx/stream/composite\u0026#34;\rMulti-Sink // Combine multiple Sinks into one. // Broadcast the input stream to all internal Sinks. // Every Event to be sinked and acked by MultiSink is sinked and acked by all internal Sinks. type MultiSink struct { // The Sinks to be combined. 2 at least. Sinks []stream.Sink // Channel Size. Defaults to the const ChanSize. ChanSize int }\r","date":"2024-10-21","id":32,"permalink":"/gx/doc/features/stream/","summary":"\u003cp\u003eA powerful, lightweight and easy-to-use Stream Processing library written in Go.\u003cbr\u003e\nIdeal for situations where there are too few resources to run Flink and Java.\u003c/p\u003e","tags":[],"title":"Stream Processing"},{"content":"Semaphore Semaphore is commonly used for limiting max concurrency, e.g. limiting max number of concurrent connections.\nUse\nimport \u0026#34;github.com/burningxflame/gx/sync/sem\u0026#34; // Create a semaphore. // The ca specifies the capacity of the semaphore. s := sem.New(ca) // Acquire a permit from the semaphore. // If none is available, block until one is available or ctx.Done channel is closed. err := s.Acquire(ctx) // Try to acquire a permit from the semaphore. // Return true if available, false otherwise. ok := s.TryAcquire() // Release a permit to the semaphore. s.Release() // Return the number of available permits. n := s.Available()\rBenchmark\ngoos: darwin goarch: amd64 cpu: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz // Acquire + Release BenchmarkAcquireRelease-12 22697646 51.96 ns/op 0 B/op 0 allocs/op\rKeyed-Semaphores Commonly used for limiting max concurrency per key, e.g. limiting max number of concurrent connections per client.\nimport \u0026#34;github.com/burningxflame/gx/sync/sem\u0026#34; // Create Keyed-Semaphores. // The ca specifies the capacity of every semaphore. // If the number of semaphores exceeds sizeHint, will try to shrink, i.e. remove unused semaphores. ks := sem.NewKSem[string](ca, sizeHint) // Get the semaphore of a key, create if not exist. s := ks.Get(key) // ... use the semaphore // Get the semaphore of another key, create if not exist. s2 := ks.Get(key2) // ... use the semaphore Generic Concurrency-Safe Map Generic version of std sync.Map.\nImport\nimport \u0026#34;github.com/burningxflame/gx/sync/gmap\u0026#34;\rAPI:\nCompareAndDelete, CompareAndSwap, Delete, Load, LoadAndDelete, LoadOrStore, Range, Store, Swap\nSample:\nmap ↗ Generic Concurrency-Safe Set Implemented based on std sync.Map.\nImport\nimport \u0026#34;github.com/burningxflame/gx/sync/set\u0026#34;\rAPI:\nAdd, Delete, Len, Contain, Range, Replace\nSample:\nset ↗ ","date":"2024-05-07","id":33,"permalink":"/gx/doc/features/sync/","summary":"\u003ch2 id=\"semaphore\"\u003eSemaphore\u003c/h2\u003e\n\u003cp\u003eSemaphore is commonly used for limiting max concurrency, e.g. limiting max number of concurrent connections.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eUse\u003c/strong\u003e\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;github.com/burningxflame/gx/sync/sem\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Create a semaphore.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// The ca specifies the capacity of the semaphore.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003esem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eNew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eca\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Acquire a permit from the semaphore.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// If none is available, block until one is available or ctx.Done channel is closed.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eAcquire\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ectx\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Try to acquire a permit from the semaphore.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Return true if available, false otherwise.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nx\"\u003eok\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eTryAcquire\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Release a permit to the semaphore.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eRelease\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Return the number of available permits.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eAvailable\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e\u003cstrong\u003eBenchmark\u003c/strong\u003e\u003c/p\u003e","tags":[],"title":"Sync"},{"content":"UDS Server The UDS Server has builtin abilities to\nclean up UDS file before listening set UDS file permission graceful shutdown defend against DDoS attacks by limiting max number of concurrent connections close idle connections generate connection id etc. import ( \u0026#34;github.com/burningxflame/gx/uds\u0026#34; \u0026#34;github.com/burningxflame/gx/sync/sem\u0026#34; ) // Create an UDS Server srv := \u0026amp;uds.Server{ // The UDS address to listen UdsAddr: \u0026#34;/some/path\u0026#34;, // File permission of the UdsAddr. // If specified, set the file permission of UdsAddr to the specified value. Perm: 0600, // Connection handler is where you communicate with a client, i.e. receive/send data from/to a client. // Connection handler should return ASAP when ctx.Done channel is closed, which usually indicates an exit signal is sent. ConnHandler: func(ctx context.Context, conn net.Conn) error { ... }, // If graceful shutdown takes longer than ShutdownTimeout, exit instantly. // Default to no timeout. ShutdownTimeout: time.Second*3, // Used to limit max number of concurrent connections. // Default to no limit. ConnLimiter: sem.New(n), // If no data is sent from a connection in the specified duration, close the connection. // Default to no timeout. IdleTimeout: time.Minute, // If true, the Context argument of ConnHandler contains the connection id. // Call GetConnId(ctx) to get connection id. CtxConnId: false, // Used to tag log messages Tag: \u0026#34;someTag\u0026#34;, // A TagLogger used to log messages Log: ..., } // Start the Server err := srv.Serve(ctx)\rHTTP Server over UDS The HTTP Server over UDS has builtin abilities to\nclean up UDS file before listening set UDS file permission graceful shutdown defend against DDoS attacks by limiting max number of concurrent requests etc. import ( \u0026#34;net/http\u0026#34; uh \u0026#34;github.com/burningxflame/gx/uds/http\u0026#34; \u0026#34;github.com/burningxflame/gx/sync/sem\u0026#34; ) // Create an HTTP Server over UDS srv := \u0026amp;uh.Server{ // http.Server in std lib Std: http.Server{ Handler: someHandler, ... }, // The UDS address to listen UdsAddr: \u0026#34;/some/path\u0026#34;, // File permission of the UdsAddr. // If specified, set the file permission of UdsAddr to the specified value. Perm: 0600, // Used to limit max number of concurrent requests. // Default to no limit. Limiter: sem.New(n), // If graceful shutdown takes longer than ShutdownTimeout, exit instantly. ShutdownTimeout: time.Second*3, // Used to tag log messages Tag: \u0026#34;someTag\u0026#34;, // A TagLogger used to log messages Log: ..., } // Start the Server err := srv.Serve(ctx)\rHTTP Client over UDS import uh \u0026#34;github.com/burningxflame/gx/uds/http\u0026#34; // Create an HTTP Client over UDS. // The return value c is of type std *http.Client. c := uh.NewClient(udsAddr) // Use the Client as usual resp, err := c.Post(...)\rMeshless Client import \u0026#34;github.com/burningxflame/gx/uds/meshless\u0026#34; // Connect to and handshake with Meshless Node Agent conn, err := meshless.Client(dstSvcId, meshless.Conf{ // Default to /meshlet/client/meshless UdsAddr: \u0026#34;some/path\u0026#34; // Connection timeout. Default to no timeout. DialTimeout: ... // If handshake does not finish in the specified duration, close the connection. // Default to no timeout. HandshakeTimeout: ... }) // Proceed to communication with the destination service // i.e. use the conn as usual Meshless HTTP Client import \u0026#34;github.com/burningxflame/gx/uds/meshless\u0026#34; // Connect to and handshake with Meshless Node Agent, and create an HTTP Client. // Same params as Meshless Client. // The return value c is of type std *http.Client. c := meshless.NewHttpClient(dstSvcId, conf) // Use the Client as usual resp, err := c.Post(...)\r","date":"2024-05-07","id":34,"permalink":"/gx/doc/features/uds/","summary":"\u003ch2 id=\"uds-server\"\u003eUDS Server\u003c/h2\u003e\n\u003cp\u003eThe UDS Server has builtin abilities to\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eclean up UDS file before listening\u003c/li\u003e\n\u003cli\u003eset UDS file permission\u003c/li\u003e\n\u003cli\u003egraceful shutdown\u003c/li\u003e\n\u003cli\u003edefend against DDoS attacks by limiting max number of concurrent connections\u003c/li\u003e\n\u003cli\u003eclose idle connections\u003c/li\u003e\n\u003cli\u003egenerate connection id\u003c/li\u003e\n\u003cli\u003eetc.\u003c/li\u003e\n\u003c/ul\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s\"\u003e\u0026#34;github.com/burningxflame/gx/uds\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"s\"\u003e\u0026#34;github.com/burningxflame/gx/sync/sem\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Create an UDS Server\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nx\"\u003esrv\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003euds\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eServer\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// The UDS address to listen\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eUdsAddr\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;/some/path\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// File permission of the UdsAddr.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// If specified, set the file permission of UdsAddr to the specified value.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003ePerm\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mo\"\u003e0600\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Connection handler is where you communicate with a client, i.e. receive/send data from/to a client.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Connection handler should return ASAP when ctx.Done channel is closed, which usually indicates an exit signal is sent.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eConnHandler\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kd\"\u003efunc\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ectx\u003c/span\u003e \u003cspan class=\"nx\"\u003econtext\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eContext\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003econn\u003c/span\u003e \u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eConn\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"kt\"\u003eerror\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// If graceful shutdown takes longer than ShutdownTimeout, exit instantly.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Default to no timeout.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eShutdownTimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eSecond\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Used to limit max number of concurrent connections.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Default to no limit.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eConnLimiter\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003esem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eNew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// If no data is sent from a connection in the specified duration, close the connection.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Default to no timeout.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eIdleTimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003etime\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMinute\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// If true, the Context argument of ConnHandler contains the connection id.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// Call GetConnId(ctx) to get connection id.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eCtxConnId\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// Used to tag log messages\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eTag\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;someTag\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e// A TagLogger used to log messages\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"nx\"\u003eLog\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"o\"\u003e...\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Start the Server\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003esrv\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eServe\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ectx\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"http-server-over-uds\"\u003eHTTP Server over UDS\u003c/h2\u003e\n\u003cp\u003eThe HTTP Server over UDS has builtin abilities to\u003c/p\u003e","tags":[],"title":"Unix Domain Socket"},{"content":"","date":"2024-08-02","id":35,"permalink":"/meshless/","summary":"","tags":[],"title":"Meshless"},{"content":"","date":"2024-08-02","id":36,"permalink":"/meshless/doc/","summary":"","tags":[],"title":"Meshless"},{"content":"","date":"2024-05-29","id":37,"permalink":"/xts/","summary":"","tags":[],"title":"XTS"},{"content":"","date":"2024-05-29","id":38,"permalink":"/xts/doc/","summary":"","tags":[],"title":"XTS"},{"content":"","date":"2024-05-07","id":39,"permalink":"/gx/doc/features/","summary":"","tags":[],"title":"Features"},{"content":"","date":"2024-05-06","id":40,"permalink":"/","summary":"","tags":[],"title":"Effortlessly Scale With Your Business"},{"content":"","date":"2024-05-06","id":41,"permalink":"/gx/","summary":"","tags":[],"title":"GX"},{"content":"","date":"2024-05-06","id":42,"permalink":"/gx/doc/","summary":"","tags":[],"title":"GX"},{"content":"","date":"2024-05-06","id":43,"permalink":"/dcs/","summary":"","tags":[],"title":"DCS"},{"content":"","date":"2024-05-06","id":44,"permalink":"/dcs/doc/","summary":"","tags":[],"title":"DCS"},{"content":"Meshless - High-Performance Sidecarless Service Mesh Speed up your cloud with the most performant service mesh.\n99% less resource consumption than sidecar pattern of service mesh.\nCompletely eliminate the network latency caused by sidecar pattern of service mesh.\nEven eliminate the network latency of direct communication.\nReal-time optimal routing.\nGet Started\nXTS - Secure and Adaptive Cross-Region Transmission for Cloud XTS is a Cloud-Native Cross-Region Transmission Service which\nimproves the security of Cross-Region Transmission,\nand provides Adaptive and Fair Hierarchical Transmission Control.\nGet Started\nDCS - Horizontally Scalable Cron for Cloud DCS is a Cloud-Native Job Scheduling System that effortlessly scales with your business.\nGet Started\nGX Stream Processing A powerful, lightweight and easy-to-use Stream Processing library written in Go.\nIdeal for situations where there are too few resources to run Flink and Java.\nGet Started\nGX - Go eXtended libraries GX is Go eXtended libraries to improve productivity, performance, reliability and security of your products at ease.\nGet Started\nMore Products Stay tuned!\n","date":"2024-05-06","id":45,"permalink":"/products/","summary":"\u003ch2 id=\"meshless---high-performance-sidecarless-service-mesh\"\u003eMeshless - High-Performance Sidecarless Service Mesh\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"/meshless/doc/intro/\"  \u003e\n    \u003cimg src=\"/meshless/doc/img/meshless.png\" /\u003e\n    \n\u003c/a\u003e\n\u003c/p\u003e\n\u003cp\u003eSpeed up your cloud with the most performant service mesh.\u003cbr\u003e\n99% less resource consumption than sidecar pattern of service mesh.\u003cbr\u003e\nCompletely eliminate the network latency caused by sidecar pattern of service mesh.\u003cbr\u003e\nEven eliminate the network latency of direct communication.\u003cbr\u003e\nReal-time optimal routing.\u003cbr\u003e\n\u003ca class=\"btn btn-primary btn-cta rounded-pill btn-lg my-3\" href=\"/meshless/doc/intro/\" role=\"button\"\u003eGet Started\u003c/a\u003e\u003cbr\u003e\n\u003cbr\u003e\u003c/p\u003e","tags":[],"title":"Products"}]